00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/26/2018 8:56:24 AM

00000000                             1  *****************************************************************************
00000000                             2  * Easy 68K Disassembler *****************************************************
00000000                             3  * Spring CSS422 *************************************************************
00000000                             4  * Coded By: Calvin Evans, Sujit Neupane, and Jay (Yu-Chi Chen) **************
00000000                             5  *****************************************************************************
00000000                             6  
00000000                             7  *****************************************************************************
00000000                             8  *SET BASE VALUES*************************************************************
00000000                             9  ****************|***********|***************|********************************
00000000  =00005000                 10  PRG_SP          EQU         $00005000       Disassembler stack location
00000000  =00008000                 11  ST_DATA         EQU         $00008000       Start of user data (min address)
00000000  =00FFFFFE                 12  EN_DATA         EQU         $00FFFFFE       Last possible data address
00000000  =0000000D                 13  CR              EQU         $0D
00000000  =0000000A                 14  LF              EQU         $0A
00000000                            15  
00000000                            16  *****************************************************************************
00000000                            17  *LOAD PROGRAM START LOCATION*************************************************
00000000                            18  ****************|***********|***************|********************************
00001000                            19  DISA_PRG        ORG         $00001000     
00001000  4FF8 5000                 20  LD_A7           LEA         PRG_SP,SP       Set stack address  
00001004                            21  
00001004                            22  *****************************************************************************
00001004                            23  *WELCOME MESSAGE SPLASH PAGE*************************************************
00001004                            24  ****************|***********|***************|********************************
00001004  43F9 0000156A             25  WELCOME         LEA         WELCOME_MSG,A1  Prepare welcome message
0000100A  700E                      26                  MOVEQ       #14,D0          Move trap task to registry
0000100C  4E4F                      27                  TRAP        #15             Perform output operation
0000100E                            28                  
0000100E                            29  *****************************************************************************
0000100E                            30  *USER INPUTS*****************************************************************
0000100E                            31  ****************|***********|***************|********************************
0000100E  43F9 000011E8             32  START_PROMPT    LEA         START_IN,A1     Load start address message
00001014  700E                      33                  MOVEQ       #14,D0          Load task for user prompt message
00001016  4E4F                      34                  TRAP        #15             Display message
00001018  43F9 0000142A             35                  LEA         USER_START,A1   Load input variable
0000101E  7002                      36                  MOVEQ       #2,D0           Load user input trap task
00001020  4E4F                      37                  TRAP        #15             Get start of data
00001022  4EB9 00002094             38                  JSR         DECODE_IN       Decode user input string
00001028  B83C 0001                 39                  CMP.B       #1,D4           Check for valid input
0000102C  6700 0010                 40                  BEQ         PASS1           Input is good
00001030                            41                  
00001030  43F9 0000125F             42                  LEA         ADDR_ERROR,A1   Load address range error message
00001036  700E                      43                  MOVEQ       #14,D0          Load task for message output
00001038  4E4F                      44                  TRAP        #15             Display error message
0000103A  4EF8 100E                 45                  JMP         START_PROMPT    Redo input
0000103E                            46                  
0000103E  4EB9 00002116             47  PASS1           JSR         CHK_ODD         Check odd or even input
00001044  B63C 0001                 48                  CMP.B       #$1,D3          Check if address was odd
00001048  67C4                      49                  BEQ         START_PROMPT    Return to start address input
0000104A  2C3C 00008000             50                  MOVE.L      #ST_DATA,D6     Load starting address (Minimum)
00001050  B686                      51                  CMP.L       D6,D3           Check for valid address input
00001052  6D00 10AA                 52                  BLT         S_ADDR_ERR      Address not in range (LOW)
00001056  2C3C 00FFFFFE             53                  MOVE.L      #EN_DATA,D6     Load ending address (Maximum)
0000105C  B686                      54                  CMP.L       D6,D3           Check for valid address input
0000105E  6E00 109E                 55                  BGT         S_ADDR_ERR      Address not in range (HIGH)
00001062  2A43                      56                  MOVEA.L     D3,A5           Move start address to A5
00001064                            57                  
00001064  43F9 00001228             58  END_PROMPT      LEA         END_IN1,A1      Load end address message
0000106A  700E                      59                  MOVEQ       #14,D0          Load task message output
0000106C  4E4F                      60                  TRAP        #15             Display message
0000106E  43F9 0000142A             61                  LEA         USER_START,A1   Load start address for output
00001074  7001                      62                  MOVEQ       #1,D0           Load task code for address out
00001076  7208                      63                  MOVEQ       #8,D1           Load start address length
00001078  4E4F                      64                  TRAP        #15             Display start address
0000107A  43F9 0000124C             65                  LEA         END_IN2,A1      Load end address message 2
00001080  700E                      66                  MOVEQ       #14,D0          Load task code for prompt message
00001082  4E4F                      67                  TRAP        #15             Display input prompt message
00001084  43F9 0000147A             68                  LEA         USER_END,A1     Load input variable
0000108A  7002                      69                  MOVEQ       #2,D0           Load user input trap task
0000108C  4E4F                      70                  TRAP        #15             Get end of data
0000108E  4EB9 00002094             71                  JSR         DECODE_IN       Decode user input string
00001094  B83C 0001                 72                  CMP.B       #1,D4           Check for valid input
00001098  6700 0010                 73                  BEQ         PASS2           Input is good
0000109C  43F9 0000125F             74                  LEA         ADDR_ERROR,A1   Load address range error message
000010A2  700E                      75                  MOVEQ       #14,D0          Load task for message output
000010A4  4E4F                      76                  TRAP        #15             Display error message
000010A6  4EF8 1064                 77                  JMP         END_PROMPT      Redo input
000010AA                            78                  
000010AA  4EB9 00002116             79  PASS2           JSR         CHK_ODD         Check address for odd/even input
000010B0  B63C 0001                 80                  CMP.B       #$1,D3          Check if address was odd
000010B4  67AE                      81                  BEQ         END_PROMPT      Return to end address input
000010B6  B686                      82                  CMP.L       D6,D3           Check input within upper bound
000010B8  6E00 1050                 83                  BGT         E_ADDR_ERROR    Address is not within range(HIGH)
000010BC  B68D                      84                  CMP.L       A5,D3           Check input within lower bound
000010BE  6D00 104A                 85                  BLT         E_ADDR_ERROR    Address is not within range (LOW)
000010C2  2C03                      86                  MOVE.L      D3,D6           Copy end address to D6
000010C4  9C8D                      87                  SUB.L       A5,D6           Calculate maximum instructions
000010C6  8CFC 0002                 88                  DIVU.W      #$2,D6          
000010CA  0286 0000FFFF             89                  ANDI.L      #$0000FFFF,D6   
000010D0                            90                  
000010D0                            91  *****************************************************************************
000010D0                            92  *PREP CODE FOR DISASSEMBLY***************************************************
000010D0                            93  ****************|***********|***************|********************************
000010D0  2A0D                      94  IO_PROC         MOVE.L      A5,D5           Move start address to D5
000010D2  7801                      95                  MOVEQ       #$1,D4          Set check value at D4
000010D4  7600                      96                  MOVEQ       #$0,D3          Reset D3     
000010D6  49F9 000013DA             97                  LEA         GD_BUFF,A4      Load A4 buffer
000010DC  47F9 0000138A             98                  LEA         BD_BUFF,A3      Load A3 buffer
000010E2  4EB9 00003B7C             99                  JSR         SET_BUFFER      Set values to buffers
000010E8  7801                     100                  MOVEQ       #$1,D4          Set check value at D4
000010EA  7600                     101                  MOVEQ       #$0,D3          Reset D3
000010EC  4EB9 00001192            102                  JSR         FILL_A4         Prep A4 buffer for output
000010F2  4EB9 0000119A            103                  JSR         FILL_A3         Prep A3 buffer for output
000010F8  4EB9 00003C2C            104                  JSR         BUFFER_A3       Move data to A3 buffer
000010FE  41F9 00001389            105                  LEA         MAX_LINES,A0    Set value to max lines
00001104  30BC 0023                106                  MOVE.W      #35,(A0)        
00001108  4EB9 00003BFC            107                  JSR         PG_CNTR         Handler for lines per page
0000110E  16BC 0000                108                  MOVE.B      #$00,(A3)       Push null char to A3
00001112  3E1D                     109                  MOVE.W      (A5)+,D7        Fetch next instruction
00001114  4EB9 00002134            110                  JSR         DISASSEMBLE     Do work
0000111A  B83C 0001                111                  CMP.B       #$1,D4          Check error bit at D4
0000111E  6C00 000C                112                  BGE         PASSED          
00001122  43F9 0000138A            113  FAILED          LEA         BD_BUFF,A1      Load buffer to display failed code
00001128  6000 000C                114                  BRA         PRINT_PAGE      Print contents of buffer
0000112C  18BC 0000                115  PASSED          MOVE.B      #$00,(A4)       Push null character to A4 buffer
00001130  43F9 000013DA            116                  LEA         GD_BUFF,A1      Load buffer to display valid code
00001136  700D                     117  PRINT_PAGE      MOVEQ       #13,D0          Load trap code
00001138  4E4F                     118                  TRAP        #15             Execute trap task
0000113A  51CE FF94                119                  DBRA        D6,IO_PROC      Decrement and branch until match
0000113E  43F9 0000131A            120  RPT             LEA         REPEAT_MSG,A1   Prep repeat message
00001144  700E                     121                  MOVE.L      #14,D0          Move trap task to D0
00001146  4E4F                     122                  TRAP        #15             Display repeat message
00001148  45F9 00001388            123                  LEA         LINES,A2        Reset line counter
0000114E  14BC 0000                124                  MOVE.B      #00,(A2)        
00001152  43F9 0000151A            125                  LEA         REPEAT,A1       Collect user input
00001158  7002                     126                  MOVE.L      #2,D0           
0000115A  4E4F                     127                  TRAP        #15
0000115C  0C11 0059                128                  CMP.B       #$59,(A1)       Check if CAPITAL Y entered
00001160  6700 FEAC                129                  BEQ         START_PROMPT    
00001164  0C11 0079                130                  CMP.B       #$79,(A1)       Check if little y entered
00001168  6700 FEA4                131                  BEQ         START_PROMPT
0000116C  0C11 004E                132                  CMP.B       #$4E,(A1)       Check if CAPITAL N entered
00001170  6700 0016                133                  BEQ         CMPLT
00001174  0C11 006E                134                  CMP.B       #$6E,(A1)       Check if little n entered
00001178  6700 000E                135                  BEQ         CMPLT
0000117C  43F9 0000135A            136                  LEA         REPEAT_ERROR,A1 Prep error message
00001182  700E                     137                  MOVE.L      #14,D0          Move trap task to D0
00001184  4E4F                     138                  TRAP        #15             Display error message
00001186  60B6                     139                  BRA         RPT
00001188  4EB9 00003C22            140  CMPLT           JSR         MISSION_CMP     Show ending and close program
0000118E  4E72 1000                141                  STOP        #$00001000      End program
00001192                           142  
00001192                           143  *****************************************************************************
00001192                           144  *FILL DATA - PREP BUFFERS****************************************************
00001192                           145  ****************|***********|***************|********************************
00001192  4EB9 00003C76            146  FILL_A4         JSR         A4_6SPACES      Fill A4 spaces
00001198  4E75                     147                  RTS
0000119A                           148                  
0000119A  16FC 0020                149  FILL_A3         MOVE.B      #' ',(A3)+      Invalid data tag
0000119E  16FC 0020                150                  MOVE.B      #' ',(A3)+
000011A2  16FC 0049                151                  MOVE.B      #'I',(A3)+ 
000011A6  16FC 004E                152                  MOVE.B      #'N',(A3)+ 
000011AA  16FC 0056                153                  MOVE.B      #'V',(A3)+ 
000011AE  16FC 0041                154                  MOVE.B      #'A',(A3)+ 
000011B2  16FC 004C                155                  MOVE.B      #'L',(A3)+ 
000011B6  16FC 0049                156                  MOVE.B      #'I',(A3)+ 
000011BA  16FC 0044                157                  MOVE.B      #'D',(A3)+ 
000011BE  16FC 0020                158                  MOVE.B      #' ',(A3)+ 
000011C2  16FC 004F                159                  MOVE.B      #'O',(A3)+ 
000011C6  16FC 0050                160                  MOVE.B      #'P',(A3)+ 
000011CA  16FC 0043                161                  MOVE.B      #'C',(A3)+ 
000011CE  16FC 004F                162                  MOVE.B      #'O',(A3)+ 
000011D2  16FC 0044                163                  MOVE.B      #'D',(A3)+ 
000011D6  16FC 0045                164                  MOVE.B      #'E',(A3)+
000011DA  16FC 0020                165                  MOVE.B      #' ',(A3)+ 
000011DE  16FC 0020                166                  MOVE.B      #' ',(A3)+ 
000011E2  16FC 0024                167                  MOVE.B      #'$',(A3)+ 
000011E6  4E75                     168                  RTS
000011E8                           169                  
000011E8                           170  *****************************************************************************
000011E8                           171  *I/O MESSAGES****************************************************************
000011E8                           172  ****************|***********|***************|********************************
000011E8= 50 6C 65 61 73 65 ...    173  START_IN        DC.B        'Please enter your starting address'
0000120A= 20 28 24 30 30 30 ...    174                  DC.B        ' ($00008000 to $00FFFFFE): ',CR,LF,0
00001228= 50 6C 65 61 73 65 ...    175  END_IN1         DC.B        'Please enter your ending address ($',0
0000124C= 20 74 6F 20 24 30 ...    176  END_IN2         DC.B        ' to $00FFFFFE): ',CR,LF,0
0000125F= 20 41 64 64 72 65 ...    177  ADDR_ERROR      DC.B        ' Address entered is not within the specified'
0000128B= 20 72 61 6E 67 65 ...    178                  DC.B        ' range',CR,LF,0
00001294= 20 59 6F 75 20 65 ...    179  ODD_MSG         DC.B        ' You entered an odd address. Addresses must be'
000012C2= 20 65 76 65 6E 20 ...    180                  DC.B        ' even numbers',CR,LF,0
000012D2= 57 68 65 6E 20 79 ...    181  NXT_PAGE        DC.B        'When you finish looking at this data, press'
000012FD= 20 45 4E 54 45 52 ...    182                  DC.B        ' ENTER to go to next page ',CR,LF,0
0000131A= 54 68 69 73 20 64 ...    183  REPEAT_MSG      DC.B        'This data has been disassembled. Do you have'
00001346= 20 6D 6F 72 65 20 ...    184                  DC.B        ' more data? (Y/N)',CR,LF,0
0000135A= 59 6F 75 20 68 61 ...    185  REPEAT_ERROR    DC.B        'You have not entered a valid command. '
00001380= 28 59 2F 4E 29 0D ...    186                  DC.B        '(Y/N)',CR,LF,0
00001388                           187  
00001388                           188  
00001388                           189  *****************************************************************************
00001388                           190  *VARIABLES AND BUFFERS*******************************************************
00001388                           191  ****************|***********|***************|********************************
00001388= 00                       192  LINES           DC.B        0
00001389= 50                       193  MAX_LINES       DC.B        80
0000138A                           194  BD_BUFF         DS.B        80
000013DA                           195  GD_BUFF         DS.B        80
0000142A                           196  USER_START      DS.B        80
0000147A                           197  USER_END        DS.B        80
000014CA                           198  CONTINUE        DS.B        80
0000151A                           199  REPEAT          DS.B        80
0000156A                           200  
0000156A                           201  *****************************************************************************
0000156A                           202  *WELCOME MESSAGE SPLASH PAGE*************************************************
0000156A                           203  ****************|***********|***************|********************************
0000156A= 2A 2A 2A 2A 2A 2A ...    204  WELCOME_MSG     DC.B        '***********************************************'
00001599= 2A 2A 2A 2A 2A 2A ...    205                  DC.B        '*********************',CR,LF
000015B0= 2A 2A 2A 2A 2A 2A ...    206                  DC.B        '***********************************************'
000015DF= 2A 2A 2A 2A 2A 2A ...    207                  DC.B        '*********************',CR,LF
000015F6= 2A 2A 20 20 20 20 ...    208                  DC.B        '**                   TTTTTT EEEE  AA  M   M    '
00001625= 20 20 20 20 20 20 ...    209                  DC.B        '                   **',CR,LF
0000163C= 2A 2A 20 20 20 20 ...    210                  DC.B        '**                     TT   E    A  A MM MM    '
0000166B= 20 20 20 20 20 20 ...    211                  DC.B        '                   **',CR,LF                                           
00001682= 2A 2A 20 20 20 20 ...    212                  DC.B        '**                     TT   EEE  AAAA M M M    '
000016B1= 20 20 20 20 20 20 ...    213                  DC.B        '                   **',CR,LF                                       
000016C8= 2A 2A 20 20 20 20 ...    214                  DC.B        '**                     TT   E    A  A M   M    '
000016F7= 20 20 20 20 20 20 ...    215                  DC.B        '                   **',CR,LF                                    
0000170E= 2A 2A 20 20 20 20 ...    216                  DC.B        '**                     TT   EEEE A  A M   M    '
0000173D= 20 20 20 20 20 20 ...    217                  DC.B        '                   **',CR,LF                                    
00001754= 2A 2A 20 20 20 20 ...    218                  DC.B        '**                                             '
00001783= 20 20 20 20 20 20 ...    219                  DC.B        '                   **',CR,LF                                                       
0000179A= 2A 2A 20 20 20 20 ...    220                  DC.B        '**                                             '
000017C9= 20 20 20 20 20 20 ...    221                  DC.B        '                   **',CR,LF                                                
000017E0= 2A 2A 20 20 20 20 ...    222                  DC.B        '**                          BBBB   11          '
0000180F= 20 20 20 20 20 20 ...    223                  DC.B        '                   **',CR,LF                                                      
00001826= 2A 2A 20 20 20 20 ...    224                  DC.B        '**                          B   B 111          '
00001855= 20 20 20 20 20 20 ...    225                  DC.B        '                   **',CR,LF                                                 
0000186C= 2A 2A 20 20 20 20 ...    226                  DC.B        '**                          BBBB   11          '
0000189B= 20 20 20 20 20 20 ...    227                  DC.B        '                   **',CR,LF                                                   
000018B2= 2A 2A 20 20 20 20 ...    228                  DC.B        '**                          B   B  11          '
000018E1= 20 20 20 20 20 20 ...    229                  DC.B        '                   **',CR,LF                                                 
000018F8= 2A 2A 20 20 20 20 ...    230                  DC.B        '**                          BBBB  11l1         '
00001927= 20 20 20 20 20 20 ...    231                  DC.B        '                   **',CR,LF                                                 
0000193E= 2A 2A 20 20 20 20 ...    232                  DC.B        '**                                             '
0000196D= 20 20 20 20 20 20 ...    233                  DC.B        '                   **',CR,LF                                              
00001984= 2A 2A 20 20 20 20 ...    234                  DC.B        '**                                             '
000019B3= 20 20 20 20 20 20 ...    235                  DC.B        '                   **',CR,LF                                               
000019CA= 2A 2A 44 44 44 20 ...    236                  DC.B        '**DDD  III  SSS   AA   SSS   SSS  EEEE M   M BB'
000019F9= 42 42 20 20 4C 20 ...    237                  DC.B        'BB  L    EEEE RRRR **',CR,LF
00001A10= 2A 2A 44 20 20 44 ...    238                  DC.B        '**D  D  I  S     A  A S     S     E    MM MM B '
00001A3F= 20 20 42 20 4C 20 ...    239                  DC.B        '  B L    E    R   R**',CR,LF
00001A56= 2A 2A 44 20 20 44 ...    240                  DC.B        '**D  D  I   SSS  AAAA  SSS   SSS  EEE  M M M BB'
00001A85= 42 42 20 20 4C 20 ...    241                  DC.B        'BB  L    EEE  RRRR **',CR,LF
00001A9C= 2A 2A 44 20 20 44 ...    242                  DC.B        '**D  D  I      S A  A     S     S E    M   M B '
00001ACB= 20 20 42 20 4C 20 ...    243                  DC.B        '  B L    E    R R  **',CR,LF
00001AE2= 2A 2A 44 44 44 20 ...    244                  DC.B        '**DDD  III SSSS  A  A SSSS  SSSS  EEEE M   M BB'
00001B11= 42 42 20 20 4C 4C ...    245                  DC.B        'BB  LLLL EEEE R  RR**',CR,LF
00001B28= 2A 2A 2A 2A 2A 2A ...    246                  DC.B        '***********************************************'
00001B57= 2A 2A 2A 2A 2A 2A ...    247                  DC.B        '*********************',CR,LF
00001B6E= 2A 2A 2A 2A 2A 2A ...    248                  DC.B        '***********************************************'
00001B9D= 2A 2A 2A 2A 2A 2A ...    249                  DC.B        '*********************',CR,LF
00001BB4= 20 20 45 41 53 59 ...    250                  DC.B        '  EASY 68K MOTOROLA DISASSEMBLER / CODED BY CAL'
00001BE3= 56 49 4E 2C 20 53 ...    251                  DC.B        'VIN, SUJIT, AND JAY  ',CR,LF,0
00001BFB                           252  
00001BFB                           253  *****************************************************************************
00001BFB                           254  *END MESSAGE SPLASH SCREEN***************************************************
00001BFB                           255  ****************|***********|***************|********************************
00001BFB= 20 20 20 20 20 20 ...    256  DARTH_ENDER     DC.B        '                       .-.                     ',CR,LF
00001C2C= 20 20 20 20 20 20 ...    257                  DC.B        '                      |_:_|                    ',CR,LF
00001C5D= 20 20 20 20 20 20 ...    258                  DC.B        '                     /(_Y_)\                   ',CR,LF
00001C8E= 20 20 20 20 20 20 ...    259                  DC.B        '                    ( \/M\/ )                  ',CR,LF
00001CBF= 20 60 2E 20 20 20 ...    260                  DC.B        ' `.               _.|-/|-|\-|._                ',CR,LF
00001CF0= 20 20 20 60 3A 20 ...    261                  DC.B        '   `:           _/.--|[[[[]|--.\_              ',CR,LF
00001D21= 20 20 20 20 20 60 ...    262                  DC.B        '     `:        /_`  : |::"| :  `.\             ',CR,LF
00001D52= 20 20 20 20 20 20 ...    263                  DC.B        '       `:     //   ./ |oUU| \.`  :\            ',CR,LF
00001D83= 20 20 20 20 20 20 ...    264                  DC.B        '         `:  _:|..| \_|___|_/ :   :|           ',CR,LF
00001DB4= 20 20 20 20 20 20 ...    265                  DC.B        '           `:.  .`  |_[___]_|  :.`:\           ',CR,LF
00001DE5= 20 20 20 20 20 20 ...    266                  DC.B        '            [::\ |  :  | |  :   ; : \          ',CR,LF
00001E16= 20 20 20 20 20 20 ...    267                  DC.B        '             |-|   \/`.| |.` \  .;.` |         ',CR,LF
00001E47= 20 20 20 20 20 20 ...    268                  DC.B        '             |\_    \  |-|   :       |         ',CR,LF
00001E78= 20 20 20 20 20 20 ...    269                  DC.B        '             |  \    \ .:    :   |   |         ',CR,LF
00001EA9= 20 20 20 20 20 20 ...    270                  DC.B        '             |   \    | `.   :    \  |         ',CR,LF
00001EDA= 20 20 20 20 20 20 ...    271                  DC.B        '             /       \   :. .;       |         ',CR,LF
00001F0B= 20 20 20 20 20 20 ...    272                  DC.B        '            /     |   |  :__/     :  \\        ',CR,LF
00001F3C= 20 20 20 20 20 20 ...    273                  DC.B        '           |  |   |    \:   | \   |   ||       ',CR,LF
00001F6D= 20 20 20 20 20 20 ...    274                  DC.B        '          /    \  : :  |:   /  |__|   /|       ',CR,LF
00001F9E= 20 20 20 20 20 20 ...    275                  DC.B        '          |     : : :_/_|  /`._\  `--|_\       ',CR,LF
00001FCF= 20 20 20 20 20 20 ...    276                  DC.B        '          /___.-/_|-`   \  \                   ',CR,LF
00002000= 20 20 20 20 20 20 ...    277                  DC.B        '                         ._.                   ',CR,LF
00002031= 54 68 61 6E 6B 20 ...    278                  DC.B        'Thank you for Disassembling with us, and...... ',CR,LF
00002062= 4D 61 79 20 54 68 ...    279                  DC.B        'May The Force Be With You!                     ',CR,LF,0
00002094                           280  
00002094                           281  *****************************************************************************
00002094                           282  *DECODE_IN*******************************************************************
00002094                           283  ****************|***********|***************|********************************
00002094  4243                     284  DECODE_IN       CLR         D3              
00002096  4245                     285                  CLR         D5              
00002098  B205                     286                  CMP.B       D5,D1           Check input too low
0000209A  6700 0058                287                  BEQ         INPUT_ERR       Bad input
0000209E  0C41 0009                288                  CMPI        #$9,D1          Check input too high
000020A2  6C00 0050                289                  BGE         INPUT_ERR       Bad input
000020A6  1419                     290  DECODE          MOVE.B      (A1)+,D2        
000020A8  B405                     291                  CMP.B       D5,D2           Check for null character
000020AA  6700 004E                292                  BEQ         VALID_INPUT
000020AE  B43C 007A                293                  CMP.B       #$7A,D2         Check if lower case ASCII
000020B2  6E00 0040                294                  BGT         INPUT_ERR       
000020B6  B43C 0061                295                  CMP.B       #$61,D2         
000020BA  6C00 002A                296                  BGE         LWR_ASCII       Convert lower ASCII
000020BE  B43C 005A                297                  CMP.B       #$5A,D2         Check if upper case ASCII
000020C2  6E00 0030                298                  BGT         INPUT_ERR
000020C6  B43C 0041                299                  CMP.B       #$41,D2         
000020CA  6C00 001E                300                  BGE         UPR_ASCII       Convert upper ASCII
000020CE  B43C 0039                301                  CMP.B       #$39,D2         Check if ASCII numeral
000020D2  6E00 0020                302                  BGT         INPUT_ERR
000020D6  B43C 0030                303                  CMP.B       #$30,D2         
000020DA  6D00 0018                304                  BLT         INPUT_ERR
000020DE  0402 0030                305                  SUBI.B      #$30,D2         Convert ASCII number
000020E2  6000 000A                306                  BRA         CHAR_SHFT           
000020E6  0402 0020                307  LWR_ASCII       SUBI.B      #$20,D2         Turn lower to upper
000020EA  0402 0037                308  UPR_ASCII       SUBI.B      #$37,D2         
000020EE  E983                     309  CHAR_SHFT       ASL.L       #4,D3           
000020F0  D602                     310                  ADD.B       D2,D3           Fill decoded address
000020F2  60B2                     311                  BRA         DECODE          
000020F4  6000 1A1A                312  INPUT_ERR       BRA         ERROR_1         
000020F8  4E75                     313                  RTS
000020FA  7801                     314  VALID_INPUT     MOVEQ       #$1,D4          Decode Complete
000020FC  4E75                     315                  RTS
000020FE                           316  
000020FE                           317  *****************************************************************************
000020FE                           318  *START ADDRESS NOT IN RANGE ERROR********************************************
000020FE                           319  ****************|***********|***************|********************************
000020FE  43F8 125F                320  S_ADDR_ERR      LEA     ADDR_ERROR,A1       Load address input error message
00002102  700E                     321                  MOVEQ   #14,D0              Load output code
00002104  4E4F                     322                  TRAP    #15                 Display Message
00002106  4EF8 100E                323                  JMP     START_PROMPT        Prompt for new input
0000210A                           324              
0000210A                           325  *****************************************************************************
0000210A                           326  *END ADDRESS NOT IN RANGE ERROR**********************************************
0000210A                           327  ****************|***********|***************|********************************
0000210A  43F8 125F                328  E_ADDR_ERROR    LEA         ADDR_ERROR,A1   Load address input 
0000210E  700E                     329                  MOVE.L      #14,D0          Load output code
00002110  4E4F                     330                  TRAP        #15             Display Message
00002112  4EF8 1064                331                  JMP         END_PROMPT      Prompt for new input
00002116                           332                  
00002116                           333  *****************************************************************************
00002116                           334  *CHECK INPUT ADDRESS (ODD/EVEN)**********************************************
00002116                           335  ****************|***********|***************|********************************
00002116  4242                     336  CHK_ODD         CLR         D2              Clear data register
00002118  3403                     337                  MOVE.W      D3,D2           Place address into D2
0000211A  0242 0001                338                  ANDI.W      #$1,D2          Find if address ends in a 1
0000211E  B43C 0001                339                  CMP.B       #$01,D2         Check if the value in D2 is 1
00002122  6700 0004                340                  BEQ         ODD_ERROR       Branch to error subroutine
00002126  4E75                     341                  RTS                         Address is even 
00002128  43F8 1294                342  ODD_ERROR       LEA         ODD_MSG,A1      Prep error message
0000212C  700E                     343                  MOVEQ       #14,D0          Load task number
0000212E  4E4F                     344                  TRAP        #15             Display error message
00002130  7601                     345                  MOVEQ       #$1,D3          Setup error state
00002132  4E75                     346                  RTS
00002134                           347  
00002134                           348  *****************************************************************************
00002134                           349  *DISASSEMBLE*****************************************************************
00002134                           350  ****************|***********|***************|********************************
00002134  3A07                     351  DISASSEMBLE     MOVE.W      D7,D5           Copy word data of OPCODE into D5
00002136  E04D                     352                  LSR.W       #$8,D5          Shift first hex into LSB position
00002138  E84D                     353                  LSR.W       #$4,D5          
0000213A  4EB9 00002142            354                  JSR         OPCODES         Decode first 4 bits
00002140  4E75                     355  DISASSEMBLED    RTS                         Return to top function
00002142                           356  
00002142                           357  *****************************************************************************
00002142                           358  *OPCODES*********************************************************************
00002142                           359  ****************|***********|***************|********************************
00002142  0C05 0000                360  OPCODES         CMPI.B      #$0,D5     
00002146  6700 0088                361                  BEQ         D_0000          OPCODES beginning with 0000
0000214A  0C05 0001                362                  CMPI.B      #$1,D5
0000214E  6700 0092                363                  BEQ         D_0001          OPCODES beginning with 0001
00002152  0C05 0002                364                  CMPI.B      #$2,D5
00002156  6700 00B0                365                  BEQ         D_0010          OPCODES beginning with 0010
0000215A  0C05 0003                366                  CMPI.B      #$3,D5
0000215E  6700 00F8                367                  BEQ         D_0011          OPCODES beginning with 0011
00002162  0C05 0004                368                  CMPI.B      #$4,D5
00002166  6700 013E                369                  BEQ         D_0100          OPCODES beginning with 0100
0000216A  0C05 0005                370                  CMPI.B      #$5,D5
0000216E  6700 0148                371                  BEQ         D_0101          OPCODES beginning with 0101
00002172  0C05 0006                372                  CMPI.B      #$6,D5
00002176  6700 0198                373                  BEQ         D_0110          OPCODES beginning with 0110
0000217A  0C05 0007                374                  CMPI.B      #$7,D5
0000217E  6700 01A2                375                  BEQ         D_0111          OPCODES beginning with 0111
00002182  0C05 0008                376                  CMPI.B      #$8,D5
00002186  6700 01F0                377                  BEQ         D_1000          OPCODES beginning with 1000
0000218A  0C05 0009                378                  CMPI.B      #$9,D5
0000218E  6700 01F8                379                  BEQ         D_1001          OPCODES beginning with 1001
00002192  0C05 000B                380                  CMPI.B      #$B,D5
00002196  6700 0200                381                  BEQ         D_1011          OPCODES beginning with 1011
0000219A  0C05 000C                382                  CMPI.B      #$C,D5
0000219E  6700 0208                383                  BEQ         D_1100          OPCODES beginning with 1100
000021A2  0C05 000D                384                  CMPI.B      #$D,D5
000021A6  6700 0218                385                  BEQ         D_1101          OPCODES beginning with 1101
000021AA  0C05 000E                386                  CMPI.B      #$E,D5
000021AE  6700 0220                387                  BEQ         D_1110          OPCODES beginning with 1110
000021B2  6000 195C                388                  BRA         ERROR_1         Reset for error checking
000021B6  4EF9 000021BC            389                  JMP         OPCODES_DONE
000021BC                           390  
000021BC  4E75                     391  OPCODES_DONE    RTS
000021BE                           392  
000021BE                           393  *****************************************************************************
000021BE                           394  *FILL MOVE*******************************************************************
000021BE                           395  ****************|***********|***************|********************************
000021BE  18FC 004D                396  FILL_MOVE       MOVE.B      #'M',(A4)+      Push opcode into A4 buffer
000021C2  18FC 004F                397                  MOVE.B      #'O',(A4)+
000021C6  18FC 0056                398                  MOVE.B      #'V',(A4)+ 
000021CA  18FC 0045                399                  MOVE.B      #'E',(A4)+ 
000021CE  4E75                     400                  RTS
000021D0                           401                  
000021D0                           402  *****************************************************************************
000021D0                           403  *D_0000**********************************************************************
000021D0                           404  ****************|***********|***************|********************************
000021D0  3A07                     405  D_0000          MOVE.W      D7,D5           Move word data of OPCODE to D5
000021D2  E04D                     406                  LSR.W       #$8,D5          Get 2nd hexabit
000021D4  0245 000F                407                  ANDI        #$000F,D5       Isolate LSB
000021D8  4EB9 00002794            408                  JSR         BIT_TWO         
000021DE  4EF8 21BC                409                  JMP         OPCODES_DONE
000021E2                           410                  
000021E2                           411  *****************************************************************************
000021E2                           412  *D_0001 - MOVEQ**************************************************************
000021E2                           413  ****************|***********|***************|********************************
000021E2  7601                     414  D_0001          MOVEQ       #$1,D3          Set D3 for validation of MOVEQ
000021E4  4EB8 21BE                415                  JSR         FILL_MOVE 
000021E8  18FC 002E                416                  MOVE.B      #'.',(A4)+ 
000021EC  18FC 0042                417                  MOVE.B      #'B',(A4)+ 
000021F0  4EB9 00003C76            418                  JSR         A4_6SPACES
000021F6  4EB9 00003798            419                  JSR         EFFECTIVE_ADDR  Find effective address
000021FC  0C03 0001                420                  CMPI.B      #$1,D3          Validate Mode
00002200  6600 190E                421                  BNE         ERROR_1         Branch to error state
00002204  4EF8 21BC                422  VALID_0001      JMP         OPCODES_DONE
00002208                           423  
00002208                           424  *****************************************************************************
00002208                           425  *D_0010 - MOVE.L/MOVEA.L*****************************************************
00002208                           426  ****************|***********|***************|********************************
00002208  7601                     427  D_0010          MOVEQ       #$1,D3          Set check value in D3
0000220A  4EB8 21BE                428                  JSR         FILL_MOVE 
0000220E  4EB9 0000376E            429                  JSR         GET_REG         Get reg number
00002214  5244                     430                  ADDQ        #$1,D4
00002216  0C42 0001                431                  CMPI        #$1,D2          Check MOVE or MOVEA instruction
0000221A  6700 002C                432                  BEQ         D_0010_A
0000221E  18FC 002E                433                  MOVE.B      #'.',(A4)+      Push size into A4 buffer
00002222  18FC 004C                434                  MOVE.B      #'L',(A4)+
00002226  18FC 0020                435                  MOVE.B      #' ',(A4)+
0000222A  18FC 0020                436  D_0010_SPACES   MOVE.B      #' ',(A4)+      Push spaces into A4 buffer
0000222E  18FC 0020                437                  MOVE.B      #' ',(A4)+
00002232  18FC 0020                438                  MOVE.B      #' ',(A4)+
00002236  18FC 0020                439                  MOVE.B      #' ',(A4)+
0000223A  18FC 0020                440                  MOVE.B      #' ',(A4)+
0000223E  4EB9 00003798            441                  JSR         EFFECTIVE_ADDR  Find effective address
00002244  4EF8 21BC                442                  JMP         OPCODES_DONE
00002248  18FC 0041                443  D_0010_A        MOVE.B      #'A',(A4)+      Push A into A4 buffer
0000224C  18FC 002E                444                  MOVE.B      #'.',(A4)+      Push size into A4 buffer
00002250  18FC 004C                445                  MOVE.B      #'L',(A4)+
00002254  4EF8 222A                446                  JMP         D_0010_SPACES   Skips one space to account for A
00002258                           447  
00002258                           448  *****************************************************************************
00002258                           449  *D_0011 - MOVE.L/MOVEA.L*****************************************************
00002258                           450  ****************|***********|***************|********************************
00002258  7601                     451  D_0011          MOVEQ       #$1,D3          Set check value in D3
0000225A  4EB8 21BE                452                  JSR         FILL_MOVE
0000225E  4EB9 0000376E            453                  JSR         GET_REG         Get reg number
00002264  0C42 0001                454                  CMPI        #$1,D2          Check if MOVE or MOVEA instruction
00002268  6700 002C                455                  BEQ         D_0011_A        
0000226C  18FC 002E                456                  MOVE.B      #'.',(A4)+      Push size into A4 buffer
00002270  18FC 0057                457                  MOVE.B      #'W',(A4)+
00002274  18FC 0020                458                  MOVE.B      #' ',(A4)+
00002278  18FC 0020                459  D_0011_SPACES   MOVE.B      #' ',(A4)+      Push spaces into A4 buffer
0000227C  18FC 0020                460                  MOVE.B      #' ',(A4)+
00002280  18FC 0020                461                  MOVE.B      #' ',(A4)+
00002284  18FC 0020                462                  MOVE.B      #' ',(A4)+
00002288  18FC 0020                463                  MOVE.B      #' ',(A4)+
0000228C  4EB9 00003798            464                  JSR         EFFECTIVE_ADDR  Find effective address
00002292  4EF8 21BC                465                  JMP         OPCODES_DONE
00002296  18FC 0041                466  D_0011_A        MOVE.B      #'A',(A4)+      Push A into A4 buffer
0000229A  18FC 002E                467                  MOVE.B      #'.',(A4)+
0000229E  18FC 0057                468                  MOVE.B      #'W',(A4)+
000022A2  4EF8 2278                469                  JMP         D_0011_SPACES   Skips one space to account for A
000022A6                           470  
000022A6                           471  *****************************************************************************
000022A6                           472  *D_0100**********************************************************************
000022A6                           473  ****************|***********|***************|********************************
000022A6  3A07                     474  D_0100          MOVE.W      D7,D5           Load instruction
000022A8  E04D                     475                  LSR.W       #$8,D5          
000022AA  0245 000F                476                  ANDI        #$000F,D5       
000022AE  4EB9 000027E2            477                  JSR         BIT_THREE       Jump to next disassembly step
000022B4  4EF8 21BC                478                  JMP         OPCODES_DONE
000022B8                           479                  
000022B8                           480  *****************************************************************************
000022B8                           481  *D_0101**********************************************************************
000022B8                           482  ****************|***********|***************|********************************
000022B8  3407                     483  D_0101          MOVE.W      D7,D2           Check if instruction is SUBQ
000022BA  0242 0100                484                  ANDI.W      #$0100,D2
000022BE  B47C 0100                485                  CMP.W       #$0100,D2
000022C2  6700 184C                486                  BEQ         ERROR_1         SUBQ will not be disassembled
000022C6  18FC 0041                487                  MOVE.B      #'A',(A4)+      Push ADDQ to A4 buffer   
000022CA  18FC 0044                488                  MOVE.B      #'D',(A4)+
000022CE  18FC 0044                489                  MOVE.B      #'D',(A4)+
000022D2  18FC 0051                490                  MOVE.B      #'Q',(A4)+
000022D6  4EB9 00003C76            491                  JSR         A4_6SPACES      Push data to A4 buffer
000022DC  18FC 0020                492                  MOVE.B      #' ',(A4)+
000022E0  18FC 0020                493                  MOVE.B      #' ',(A4)+
000022E4  18FC 0023                494                  MOVE.B      #'#',(A4)+
000022E8  18FC 0024                495                  MOVE.B      #'$',(A4)+
000022EC  4EB9 00003778            496                  JSR         GET_REG2        Get immediate data (1-8)
000022F2  0C02 0000                497                  CMPI.B      #$0,D2
000022F6  6700 0010                498                  BEQ         PRINT_8        
000022FA  4EB9 0000396C            499                  JSR         PUSH_REG_NUM    
00002300  18FC 002C                500  D_0101_FINISH   MOVE.B      #',',(A4)+
00002304  6000 1492                501                  BRA         EFFECTIVE_ADDR  Get effective address
00002308  18FC 0038                502  PRINT_8         MOVE.B      #'8',(A4)+
0000230C  4EF8 2300                503                  JMP         D_0101_FINISH
00002310                           504  
00002310                           505  *****************************************************************************
00002310                           506  *D_0110**********************************************************************
00002310                           507  ****************|***********|***************|********************************
00002310  3A07                     508  D_0110          MOVE.W      D7,D5           Load instruction
00002312  E04D                     509                  LSR.W       #$8,D5          
00002314  0245 000F                510                  ANDI        #$000F,D5
00002318  4EB9 00002EDC            511                  JSR         BIT_FOUR        Continue disassembly
0000231E  4EF8 21BC                512                  JMP         OPCODES_DONE
00002322                           513                  
00002322                           514  *****************************************************************************
00002322                           515  *D_0111**********************************************************************
00002322                           516  ****************|***********|***************|********************************
00002322  3A07                     517  D_0111          MOVE.W      D7,D5           Load instruction
00002324  E04D                     518                  LSR.W       #$8,D5           
00002326  0245 0001                519                  ANDI        #$0001,D5       Check for MOVEQ command
0000232A  0C45 0000                520                  CMPI.W      #$0,D5          
0000232E  6700 0008                521                  BEQ         D_MOVEQ     
00002332  6000 17DC                522                  BRA         ERROR_1         Cannot disassemble further
00002336  4E75                     523                  RTS
00002338  18FC 004D                524  D_MOVEQ         MOVE.B      #'M',(A4)+      Push MOVEQ into A4 buffer
0000233C  18FC 004F                525                  MOVE.B      #'O',(A4)+
00002340  18FC 0056                526                  MOVE.B      #'V',(A4)+ 
00002344  18FC 0045                527                  MOVE.B      #'E',(A4)+   
00002348  18FC 0051                528                  MOVE.B      #'Q',(A4)+
0000234C  4EB9 00003C76            529                  JSR         A4_6SPACES
00002352  18FC 0020                530                  MOVE.B      #' ',(A4)+
00002356  18FC 0023                531                  MOVE.B      #'#',(A4)+
0000235A  4EB9 00003528            532                  JSR         GET_OFFSET      Get 8-bit offset data
00002360  18FC 002C                533                  MOVE.B      #',',(A4)+      Push data register into buffer A4
00002364  18FC 0044                534                  MOVE.B      #'D',(A4)+ 
00002368  4EB9 00003778            535                  JSR         GET_REG2 
0000236E  4EB9 0000396C            536                  JSR         PUSH_REG_NUM    Get registry number     
00002374  4EF8 21BC                537                  JMP         OPCODES_DONE
00002378                           538                  
00002378                           539  *****************************************************************************
00002378                           540  *D_1000**********************************************************************
00002378                           541  ****************|***********|***************|********************************
00002378  4EB9 0000376E            542  D_1000          JSR         GET_REG         Get data registry
0000237E  4EB9 00002F2C            543                  JSR         BIT_FIVE        Continue decoding this OPCODE
00002384  4EF8 21BC                544                  JMP         OPCODES_DONE
00002388                           545           
00002388                           546  *****************************************************************************
00002388                           547  *D_1001**********************************************************************
00002388                           548  ****************|***********|***************|********************************
00002388  4EB9 0000376E            549  D_1001          JSR         GET_REG         Get reg number
0000238E  4EB9 000033C4            550                  JSR         BIT_NINE        Continue disassembly
00002394  4EF8 21BC                551                  JMP         OPCODES_DONE
00002398                           552                  
00002398                           553  *****************************************************************************
00002398                           554  *D_1011**********************************************************************
00002398                           555  ****************|***********|***************|********************************
00002398  4EB9 0000376E            556  D_1011          JSR         GET_REG         Get reg number
0000239E  4EB9 000031A6            557                  JSR         BIT_SEVEN       Continue disassembly
000023A4  4EF8 21BC                558                  JMP         OPCODES_DONE
000023A8                           559  
000023A8                           560  *****************************************************************************
000023A8                           561  *D_1100**********************************************************************
000023A8                           562  ****************|***********|***************|********************************
000023A8  3407                     563  D_1100          MOVE.W      D7,D2           Move current OPCODE from D7 to D2
000023AA  E64A                     564                  LSR.W       #$3,D2          
000023AC  0242 003F                565                  ANDI        #$003F,D2       Chop off remaining bits
000023B0  4EB9 0000376E            566                  JSR         GET_REG         Get registry data
000023B6  4EB9 0000305A            567                  JSR         BIT_SIX         Continue decoding this OPCODE
000023BC  4EF8 21BC                568                  JMP         OPCODES_DONE
000023C0                           569  
000023C0                           570  *****************************************************************************
000023C0                           571  *D_1101**********************************************************************
000023C0                           572  ****************|***********|***************|********************************
000023C0  4EB9 0000376E            573  D_1101          JSR         GET_REG         Get reg number
000023C6  4EB9 0000323C            574                  JSR         BIT_EIGHT       Continue disassembly
000023CC  4EF8 21BC                575                  JMP         OPCODES_DONE
000023D0                           576                  
000023D0                           577  *****************************************************************************
000023D0                           578  *D_1110**********************************************************************
000023D0                           579  ****************|***********|***************|********************************
000023D0  4EB9 0000366C            580  D_1110          JSR         DATA_SIZE       Get size of data
000023D6  0C02 0000                581                  CMPI.B      #$0,D2         Check for shift byte data
000023DA  6700 00EE                582                  BEQ         D_S_BYTE
000023DE  0C02 0001                583                  CMPI.B      #$1,D2          Check for shift word data
000023E2  6700 01AA                584                  BEQ         D_S_WORD 
000023E6  0C02 0002                585                  CMPI.B      #$2,D2          Check for shift longword data
000023EA  6700 0266                586                  BEQ         D_S_LONG 
000023EE  3407                     587                  MOVE.W      D7,D2           Move current OPCODE to D2
000023F0  E04A                     588                  LSR.W       #$8,D2          Move bits 9-10 into position
000023F2  E24A                     589                  LSR.W       #$1,D2
000023F4  0242 0003                590                  ANDI        #$0003,D2       Chop off unneeded data
000023F8  0C02 0000                591                  CMPI.B      #$0,D2          Check A(arithmetic) shift
000023FC  6700 0076                592                  BEQ         D_ARITH
00002400  0C02 0001                593                  CMPI.B      #$1,D2          Check L(logical) shift
00002404  6700 0038                594                  BEQ         D_LOGIC
00002408  4EB9 00003784            595                  JSR         BIT_RANGE_8      
0000240E  0C02 0000                596                  CMPI.B      #$0,D2          Check rotate right instruction
00002412  6700 0016                597                  BEQ         D_ROR 
00002416  18FC 0052                598                  MOVE.B      #'R',(A4)+      Push ROL to A4 buffer
0000241A  18FC 004F                599                  MOVE.B      #'O',(A4)+ 
0000241E  18FC 004C                600                  MOVE.B      #'L',(A4)+
00002422  18FC 0020                601                  MOVE.B      #' ',(A4)+
00002426  6000 0082                602                  BRA         D_MEMSHFT       Branch to addressing 
0000242A  18FC 0052                603  D_ROR           MOVE.B      #'R',(A4)+      Push ROR to A4 buffer
0000242E  18FC 004F                604                  MOVE.B      #'O',(A4)+ 
00002432  18FC 0052                605                  MOVE.B      #'R',(A4)+ 
00002436  18FC 0020                606                  MOVE.B      #' ',(A4)+
0000243A  6000 006E                607                  BRA         D_MEMSHFT       Branch to addressing
0000243E  4EB9 00003784            608  D_LOGIC         JSR         BIT_RANGE_8     
00002444  0C02 0000                609                  CMPI.B      #$0,D2          Check if LSR instruction
00002448  6700 0016                610                  BEQ         D_LSR 
0000244C  18FC 004C                611                  MOVE.B      #'L',(A4)+      Push LSL to A4 buffer
00002450  18FC 0053                612                  MOVE.B      #'S',(A4)+
00002454  18FC 004C                613                  MOVE.B      #'L',(A4)+ 
00002458  18FC 0020                614                  MOVE.B      #' ',(A4)+
0000245C  6000 004C                615                  BRA         D_MEMSHFT       Branch to addressing
00002460  18FC 004C                616  D_LSR           MOVE.B      #'L',(A4)+      Push LSR to A4 buffer
00002464  18FC 0053                617                  MOVE.B      #'S',(A4)+
00002468  18FC 0052                618                  MOVE.B      #'R',(A4)+ 
0000246C  18FC 0020                619                  MOVE.B      #' ',(A4)+
00002470  6000 0038                620                  BRA         D_MEMSHFT       Branch to addressing
00002474  4EB9 00003784            621  D_ARITH         JSR         BIT_RANGE_8     
0000247A  0C02 0000                622                  CMPI.B      #$0,D2          Check if ASR instruction
0000247E  6700 0016                623                  BEQ         D_ASR
00002482  18FC 0041                624                  MOVE.B      #'A',(A4)+      Push ASL to A4 buffer
00002486  18FC 0053                625                  MOVE.B      #'S',(A4)+
0000248A  18FC 004C                626                  MOVE.B      #'L',(A4)+
0000248E  18FC 0020                627                  MOVE.B      #' ',(A4)+
00002492  6000 0016                628                  BRA         D_MEMSHFT       Branch to addressing
00002496  18FC 0041                629  D_ASR           MOVE.B      #'A',(A4)+      Push ASR to A4 buffer
0000249A  18FC 0053                630                  MOVE.B      #'S',(A4)+
0000249E  18FC 0052                631                  MOVE.B      #'R',(A4)+
000024A2  18FC 0020                632                  MOVE.B      #' ',(A4)+
000024A6  6000 0002                633                  BRA         D_MEMSHFT       Branch to addressing
000024AA  4EB9 00003C76            634  D_MEMSHFT       JSR         A4_6SPACES      Push spaces into A4 buffer
000024B0  18FC 0020                635                  MOVE.B      #' ',(A4)+
000024B4  18FC 0020                636                  MOVE.B      #' ',(A4)+
000024B8  4EB9 00003798            637                  JSR         EFFECTIVE_ADDR  Find effective address
000024BE  0C03 0001                638                  CMPI.B      #$1,D3          Check valid address mode
000024C2  6700 164C                639                  BEQ         ERROR_1         Invalid mode
000024C6  4EF8 21BC                640                  JMP         OPCODES_DONE
000024CA  4EB9 0000378E            641  D_S_BYTE        JSR         BIT_RANGE_3TO4  
000024D0  0C02 0000                642                  CMPI.B      #$0,D2          Check arithmetic shift
000024D4  6700 007E                643                  BEQ         D_ASB
000024D8  0C02 0001                644                  CMPI.B      #$1,D2          Check logical shift
000024DC  6700 003C                645                  BEQ         D_LSB
000024E0  4EB9 00003784            646                  JSR         BIT_RANGE_8     
000024E6  0C02 0000                647                  CMPI.B      #$0,D2          Check rotate right 
000024EA  6700 0018                648                  BEQ         D_RORB
000024EE  18FC 0052                649                  MOVE.B      #'R',(A4)+      Push ROL.B to A4 buffer
000024F2  18FC 004F                650                  MOVE.B      #'O',(A4)+
000024F6  18FC 004C                651                  MOVE.B      #'L',(A4)+
000024FA  4EB9 00002716            652                  JSR         D_1110_B
00002500  6000 023E                653                  BRA         D_COMP_1110     Complete disassembly
00002504  18FC 0052                654  D_RORB          MOVE.B      #'R',(A4)+      Push ROR.B to A4 buffer
00002508  18FC 004F                655                  MOVE.B      #'O',(A4)+
0000250C  18FC 0052                656                  MOVE.B      #'R',(A4)+
00002510  4EB9 00002716            657                  JSR         D_1110_B
00002516  6000 0228                658                  BRA         D_COMP_1110     Complete disassembly
0000251A  4EB9 00003784            659  D_LSB           JSR         BIT_RANGE_8     
00002520  0C02 0000                660                  CMPI.B      #$0,D2          Check for LSR
00002524  6700 0018                661                  BEQ         D_LSRB
00002528  18FC 004C                662                  MOVE.B      #'L',(A4)+      Push LSL.B to A4 buffer
0000252C  18FC 0053                663                  MOVE.B      #'S',(A4)+
00002530  18FC 004C                664                  MOVE.B      #'L',(A4)+
00002534  4EB9 00002716            665                  JSR         D_1110_B
0000253A  6000 0204                666                  BRA         D_COMP_1110     Complete disassembly
0000253E  18FC 004C                667  D_LSRB          MOVE.B      #'L',(A4)+      Push LSR.B to A4 buffer
00002542  18FC 0053                668                  MOVE.B      #'S',(A4)+
00002546  18FC 0052                669                  MOVE.B      #'R',(A4)+
0000254A  4EB9 00002716            670                  JSR         D_1110_B
00002550  6000 01EE                671                  BRA         D_COMP_1110     Complete disassembly
00002554  4EB9 00003784            672  D_ASB           JSR         BIT_RANGE_8     
0000255A  0C02 0000                673                  CMPI.B      #$0,D2          Check for ASR
0000255E  6700 0018                674                  BEQ         D_ASRB          
00002562  18FC 0041                675                  MOVE.B      #'A',(A4)+      Push ASL.B to A4 buffer
00002566  18FC 0053                676                  MOVE.B      #'S',(A4)+
0000256A  18FC 004C                677                  MOVE.B      #'L',(A4)+
0000256E  4EB9 00002716            678                  JSR         D_1110_B
00002574  6000 01CA                679                  BRA         D_COMP_1110     Complete disassembly
00002578  18FC 0041                680  D_ASRB          MOVE.B      #'A',(A4)+      Push ASR.B to A4 buffer
0000257C  18FC 0053                681                  MOVE.B      #'S',(A4)+
00002580  18FC 0052                682                  MOVE.B      #'R',(A4)+
00002584  4EB9 00002716            683                  JSR         D_1110_B
0000258A  6000 01B4                684                  BRA         D_COMP_1110     Complete disassembly
0000258E  4EB9 0000378E            685  D_S_WORD        JSR         BIT_RANGE_3TO4  
00002594  0C02 0000                686                  CMPI.B      #$0,D2          Check if arithmetic shift
00002598  6700 007E                687                  BEQ         D_ASW
0000259C  0C02 0001                688                  CMPI.B      #$1,D2          Check if logical shift
000025A0  6700 003C                689                  BEQ         D_LSW
000025A4  4EB9 00003784            690                  JSR         BIT_RANGE_8     
000025AA  0C02 0000                691                  CMPI.B      #$0,D2          Check if rotate right
000025AE  6700 0018                692                  BEQ         D_RORW
000025B2  18FC 0052                693                  MOVE.B      #'R',(A4)+      Push ROL.W to A4 buffer
000025B6  18FC 004F                694                  MOVE.B      #'O',(A4)+
000025BA  18FC 004C                695                  MOVE.B      #'L',(A4)+
000025BE  4EB9 00002724            696                  JSR         D_1110_W
000025C4  6000 017A                697                  BRA         D_COMP_1110     Complete disassembly
000025C8  18FC 0052                698  D_RORW          MOVE.B      #'R',(A4)+      Push ROR.W to A4 buffer
000025CC  18FC 004F                699                  MOVE.B      #'O',(A4)+
000025D0  18FC 0052                700                  MOVE.B      #'R',(A4)+
000025D4  4EB9 00002724            701                  JSR         D_1110_W
000025DA  6000 0164                702                  BRA         D_COMP_1110     Complete disassembly
000025DE  4EB9 00003784            703  D_LSW           JSR         BIT_RANGE_8     
000025E4  0C02 0000                704                  CMPI.B      #$0,D2          Check if LSR.W
000025E8  6700 0018                705                  BEQ         D_LSRW
000025EC  18FC 004C                706                  MOVE.B      #'L',(A4)+      Push LSR.W to A4 buffer
000025F0  18FC 0053                707                  MOVE.B      #'S',(A4)+      
000025F4  18FC 004C                708                  MOVE.B      #'L',(A4)+ 
000025F8  4EB9 00002724            709                  JSR         D_1110_W
000025FE  6000 0140                710                  BRA         D_COMP_1110     Complete disassembly
00002602  18FC 004C                711  D_LSRW          MOVE.B      #'L',(A4)+      Push LSR.W to A4 buffer
00002606  18FC 0053                712                  MOVE.B      #'S',(A4)+
0000260A  18FC 0052                713                  MOVE.B      #'R',(A4)+
0000260E  4EB9 00002724            714                  JSR         D_1110_W
00002614  6000 012A                715                  BRA         D_COMP_1110     Complete disassembly
00002618  4EB9 00003784            716  D_ASW           JSR         BIT_RANGE_8     
0000261E  0C02 0000                717                  CMPI.B      #$0,D2          Check arithmetic shift right
00002622  6700 0018                718                  BEQ         D_ASRW
00002626  18FC 0041                719                  MOVE.B      #'A',(A4)+      Push ASL.W into A4 buffer
0000262A  18FC 0053                720                  MOVE.B      #'S',(A4)+
0000262E  18FC 004C                721                  MOVE.B      #'L',(A4)+
00002632  4EB9 00002724            722                  JSR         D_1110_W
00002638  6000 0106                723                  BRA         D_COMP_1110     Complete disassembly
0000263C  18FC 0041                724  D_ASRW          MOVE.B      #'A',(A4)+      Push ASL.W into A4 buffer
00002640  18FC 0053                725                  MOVE.B      #'S',(A4)+
00002644  18FC 0052                726                  MOVE.B      #'R',(A4)+
00002648  4EB9 00002724            727                  JSR         D_1110_W
0000264E  6000 00F0                728                  BRA         D_COMP_1110     Complete disassembly
00002652  4EB9 0000378E            729  D_S_LONG        JSR         BIT_RANGE_3TO4  
00002658  0C02 0000                730                  CMPI.B      #$0,D2          Check if arithmetic shift 
0000265C  6700 007E                731                  BEQ         D_ASL
00002660  0C02 0001                732                  CMPI.B      #$1,D2          Check if logical shift
00002664  6700 003C                733                  BEQ         D_LSL
00002668  4EB9 00003784            734                  JSR         BIT_RANGE_8     
0000266E  0C02 0000                735                  CMPI.B      #$0,D2          Check if ROR.L
00002672  6700 0018                736                  BEQ         D_RORL
00002676  18FC 0052                737                  MOVE.B      #'R',(A4)+      Push ROL.L to A4 buffer
0000267A  18FC 004F                738                  MOVE.B      #'O',(A4)+
0000267E  18FC 004C                739                  MOVE.B      #'L',(A4)+
00002682  4EB9 00002732            740                  JSR         D_1110_L
00002688  6000 00B6                741                  BRA         D_COMP_1110     Complete disassembly
0000268C  18FC 0052                742  D_RORL          MOVE.B      #'R',(A4)+      Push ROL.L to A4 buffer
00002690  18FC 004F                743                  MOVE.B      #'O',(A4)+
00002694  18FC 0052                744                  MOVE.B      #'R',(A4)+
00002698  4EB9 00002732            745                  JSR         D_1110_L
0000269E  6000 00A0                746                  BRA         D_COMP_1110     Complete disassembly
000026A2  4EB9 00003784            747  D_LSL           JSR         BIT_RANGE_8     
000026A8  0C02 0000                748                  CMPI.B      #$0,D2          Check if LSR.L
000026AC  6700 0018                749                  BEQ         D_LSRL
000026B0  18FC 004C                750                  MOVE.B      #'L',(A4)+      Push LSL.L to A4 buffer
000026B4  18FC 0053                751                  MOVE.B      #'S',(A4)+
000026B8  18FC 004C                752                  MOVE.B      #'L',(A4)+
000026BC  4EB9 00002732            753                  JSR         D_1110_L
000026C2  6000 007C                754                  BRA         D_COMP_1110     Complete disassembly
000026C6  18FC 004C                755  D_LSRL          MOVE.B      #'L',(A4)+      Push LSR.L to A4 buffer
000026CA  18FC 0053                756                  MOVE.B      #'S',(A4)+
000026CE  18FC 0052                757                  MOVE.B      #'R',(A4)+
000026D2  4EB9 00002732            758                  JSR         D_1110_L
000026D8  6000 0066                759                  BRA         D_COMP_1110     Complete disassembly
000026DC  4EB9 00003784            760  D_ASL           JSR         BIT_RANGE_8     
000026E2  0C02 0000                761                  CMPI.B      #$0,D2          Check if ASR.L
000026E6  6700 0018                762                  BEQ         D_ASR_L
000026EA  18FC 0041                763                  MOVE.B      #'A',(A4)+      Push ASL.L to A4 buffer
000026EE  18FC 0053                764                  MOVE.B      #'S',(A4)+
000026F2  18FC 004C                765                  MOVE.B      #'L',(A4)+
000026F6  4EB9 00002732            766                  JSR         D_1110_L
000026FC  6000 0042                767                  BRA         D_COMP_1110     Complete disassembly
00002700  18FC 0041                768  D_ASR_L         MOVE.B      #'A',(A4)+      Push ASR.L to A4 buffer
00002704  18FC 0053                769                  MOVE.B      #'S',(A4)+
00002708  18FC 004C                770                  MOVE.B      #'L',(A4)+
0000270C  4EB9 00002732            771                  JSR         D_1110_L
00002712  6000 002C                772                  BRA         D_COMP_1110     Complete disassembly
00002716  18FC 002E                773  D_1110_B        MOVE.B      #'.',(A4)+      Push Byte B to A4 buffer
0000271A  18FC 0042                774                  MOVE.B      #'B',(A4)+
0000271E  18FC 0020                775                  MOVE.B      #' ',(A4)+
00002722  4E75                     776                  RTS
00002724  18FC 002E                777  D_1110_W        MOVE.B      #'.',(A4)+      Push Word W to A4 buffer
00002728  18FC 0057                778                  MOVE.B      #'W',(A4)+
0000272C  18FC 0020                779                  MOVE.B      #' ',(A4)+
00002730  4E75                     780                  RTS
00002732  18FC 002E                781  D_1110_L        MOVE.B      #'.',(A4)+      Push Longword L to A4 buffer
00002736  18FC 004C                782                  MOVE.B      #'L',(A4)+
0000273A  18FC 0020                783                  MOVE.B      #' ',(A4)+
0000273E  4E75                     784                  RTS
00002740  4EB9 00003C76            785  D_COMP_1110     JSR         A4_6SPACES      Push spaces to A4 buffer
00002746  3407                     786                  MOVE.W      D7,D2           Move the current OPCODE to D2
00002748  EA4A                     787                  LSR.W       #$5,D2          Shift the 5th bit into position
0000274A  0242 0001                788                  ANDI.W      #$0001,D2       Chop off unneeded data
0000274E  0C02 0001                789                  CMPI.B      #$1,D2          Check if shift size in register
00002752  6700 0018                790                  BEQ         D_REGSHIFT
00002756  3407                     791                  MOVE.W      D7,D2           Move current OPCODE to D2
00002758  18FC 0023                792                  MOVE.B      #'#',(A4)+           
0000275C  E94A                     793                  LSL.W       #$4,D2          
0000275E  E04A                     794                  LSR.W       #$8,D2
00002760  EA4A                     795                  LSR.W       #$5,D2
00002762  4EB9 0000396C            796                  JSR         PUSH_REG_NUM        
00002768  6000 0012                797                  BRA         D_COMP2_1110    Complete disassembly
0000276C  18FC 0044                798  D_REGSHIFT      MOVE.B      #'D',(A4)+      Push D to A4 buffer
00002770  4EB9 00003778            799                  JSR         GET_REG2        Registry number
00002776  4EB9 0000396C            800                  JSR         PUSH_REG_NUM    Get reg number
0000277C  18FC 002C                801  D_COMP2_1110    MOVE.B      #',',(A4)+      Push ,D to A4 buffer
00002780  18FC 0044                802                  MOVE.B      #'D',(A4)+      
00002784  3407                     803                  MOVE.W      D7,D2           Move current OPCODE from D7 to D2
00002786  0242 0007                804                  ANDI        #$0007,D2       Chop off unneeded data
0000278A  4EB9 0000396C            805                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00002790  4EF8 21BC                806                  JMP         OPCODES_DONE
00002794                           807  
00002794                           808  *****************************************************************************
00002794                           809  *BIT_TWO - DECODE SECOND HEX*************************************************
00002794                           810  ****************|***********|***************|********************************
00002794  0C05 0004                811  BIT_TWO         CMPI.B      #$4,D5    
00002798  6700 000C                812                  BEQ         D2_0100         Decode SUBI   
0000279C  0C05 0006                813                  CMPI.B      #$6,D5
000027A0  6700 0022                814                  BEQ         D2_0110
000027A4                           815  
000027A4  4E75                     816  BIT_TWO_DONE    RTS
000027A6                           817  
000027A6                           818  *****************************************************************************
000027A6                           819  *D2_0100 - SUBI**************************************************************
000027A6                           820  ****************|***********|***************|********************************
000027A6  18FC 0053                821  D2_0100         MOVE.B      #'S',(A4)+      Push SUBI into A4 buffer
000027AA  18FC 0055                822                  MOVE.B      #'U',(A4)+
000027AE  18FC 0042                823                  MOVE.B      #'B',(A4)+
000027B2  18FC 0049                824                  MOVE.B      #'I',(A4)+
000027B6  18FC 002E                825                  MOVE.B      #'.',(A4)+
000027BA  4EB9 000035A0            826                  JSR         IMM_DATA        Get immediate data
000027C0  4EF8 27A4                827                  JMP         BIT_TWO_DONE
000027C4                           828  
000027C4                           829  *****************************************************************************
000027C4                           830  *D2_0110 - ADDI**************************************************************
000027C4                           831  ****************|***********|***************|********************************
000027C4  18FC 0041                832  D2_0110         MOVE.B      #'A',(A4)+      Push ADDI into A4 buffer
000027C8  18FC 0044                833                  MOVE.B      #'D',(A4)+
000027CC  18FC 0044                834                  MOVE.B      #'D',(A4)+
000027D0  18FC 0049                835                  MOVE.B      #'I',(A4)+
000027D4  18FC 002E                836                  MOVE.B      #'.',(A4)+
000027D8  4EB9 000035A0            837                  JSR         IMM_DATA        Get immediate data
000027DE  4EF8 27A4                838                  JMP         BIT_TWO_DONE         
000027E2                           839                  
000027E2                           840  *****************************************************************************
000027E2                           841  *BIT_THREE*******************************************************************
000027E2                           842  ****************|***********|***************|********************************
000027E2  0C05 0001                843  BIT_THREE       CMPI.B      #$1,D5          Possible LEA instruction
000027E6  6700 0060                844                  BEQ         D3_0001 
000027EA  0C05 0002                845                  CMPI.B      #$2,D5          CLR instruction
000027EE  6700 006C                846                  BEQ         D3_0010
000027F2  0C05 0003                847                  CMPI.B      #$3,D5          Possible LEA instruction
000027F6  6700 0050                848                  BEQ         D3_0001
000027FA  0C05 0005                849                  CMPI.B      #$5,D5          Possible LEA instruction
000027FE  6700 0048                850                  BEQ         D3_0001
00002802  0C05 0007                851                  CMPI.B      #$7,D5          Possible LEA instruction
00002806  6700 0040                852                  BEQ         D3_0001
0000280A  0C05 0008                853                  CMPI.B      #$8,D5          MOVEM instruction
0000280E  6700 00AC                854                  BEQ         D3_MOVEM
00002812  0C05 0009                855                  CMPI.B      #$9,D5          Possible LEA instruction
00002816  6700 0030                856                  BEQ         D3_0001
0000281A  0C05 000B                857                  CMPI.B      #$B,D5          Possible LEA instruction
0000281E  6700 0028                858                  BEQ         D3_0001
00002822  0C05 000C                859                  CMPI.B      #$C,D5          MOVEM instruction
00002826  6700 0094                860                  BEQ         D3_MOVEM
0000282A  0C05 000D                861                  CMPI.B      #$D,D5          Possible LEA instruction
0000282E  6700 0018                862                  BEQ         D3_0001
00002832  0C05 000E                863                  CMPI.B      #$E,D5          Possible JMP/JSR/NOP/RTS
00002836  6700 05AC                864                  BEQ         D3_1110
0000283A  0C05 000F                865                  CMPI.B      #$F,D5          Possible LEA instruction
0000283E  6700 0008                866                  BEQ         D3_0001                
00002842  6000 12CC                867                  BRA         ERROR_1
00002846                           868              
00002846  4E75                     869  BIT_THREE_DONE  RTS
00002848                           870  
00002848                           871  *****************************************************************************
00002848                           872  *D3_0001 - LEA***************************************************************
00002848                           873  ****************|***********|***************|********************************
00002848  4EB9 0000366C            874  D3_0001         JSR         DATA_SIZE       Get size of data
0000284E  B43C 0003                875                  CMP.B       #$3,D2          Check if LEA instruction
00002852  6700 0CF2                876                  BEQ         LEA_INS         Decode LEA instruction
00002856  6000 12B8                877                  BRA         ERROR_1
0000285A  4E75                     878                  RTS
0000285C                           879                  
0000285C                           880  *****************************************************************************
0000285C                           881  *D3_0010 - CLR***************************************************************
0000285C                           882  ****************|***********|***************|********************************
0000285C  18FC 0043                883  D3_0010         MOVE.B      #'C',(A4)+      Push CLR to A4 buffer
00002860  18FC 004C                884                  MOVE.B      #'L',(A4)+
00002864  18FC 0052                885                  MOVE.B      #'R',(A4)+
00002868  18FC 002E                886                  MOVE.B      #'.',(A4)+
0000286C  4EB9 0000366C            887                  JSR         DATA_SIZE       Get size of data
00002872  B47C 0000                888                  CMP.W       #$0,D2          Check if byte data
00002876  6700 0032                889                  BEQ         D3_0010B
0000287A  B47C 0001                890                  CMP.W       #$1,D2          Check if word data
0000287E  6700 0030                891                  BEQ         D3_0010W
00002882  B47C 0002                892                  CMP.W       #$2,D2          Check if longword data
00002886  6700 002E                893                  BEQ         D3_0010L
0000288A  6000 1284                894  D3_0010E        BRA         ERROR_1         
0000288E  4EF8 2846                895                  JMP         BIT_THREE_DONE 
00002892  4EB9 00003C76            896  D3_0010S        JSR         A4_6SPACES      Push spaces to A4 buffer
00002898  18FC 0020                897                  MOVE.B      #' ',(A4)+ 
0000289C  4EB9 00003798            898                  JSR         EFFECTIVE_ADDR  Find effective address
000028A2  0C03 0001                899                  CMPI.B      #$1,D3          Check for valid mode
000028A6  67E2                     900                  BEQ         D3_0010E
000028A8  4E75                     901                  RTS
000028AA  18FC 0042                902  D3_0010B        MOVE.B      #'B',(A4)+      Push B to A4 buffer
000028AE  60E2                     903                  BRA         D3_0010S
000028B0  18FC 0057                904  D3_0010W        MOVE.B      #'W',(A4)+      Push W to A4 buffer
000028B4  60DC                     905                  BRA         D3_0010S
000028B6  18FC 004C                906  D3_0010L        MOVE.B      #'L',(A4)+      Push L to A4 buffer
000028BA  60D6                     907                  BRA         D3_0010S
000028BC                           908  
000028BC                           909  *****************************************************************************
000028BC                           910  *D3_MOVEM - MOVEM SETUP FUNCTION*********************************************
000028BC                           911  ****************|***********|***************|********************************
000028BC  4EB8 21BE                912  D3_MOVEM        JSR         FILL_MOVE       Push MOVEM to A4 buffer
000028C0  18FC 004D                913                  MOVE.B      #'M',(A4)+  
000028C4  18FC 002E                914                  MOVE.B      #'.',(A4)+    
000028C8  4EB9 0000366C            915                  JSR         DATA_SIZE       Get size of data
000028CE  B43C 0002                916                  CMP.B       #$2,D2          Check if MOVEM.W
000028D2  6700 000E                917                  BEQ         D3_MOVEMW
000028D6  B43C 0003                918                  CMP.B       #$3,D2          Check if MOVEM.L
000028DA  6700 000E                919                  BEQ         D3_MOVEML
000028DE  6000 1230                920                  BRA         ERROR_1
000028E2  18FC 0057                921  D3_MOVEMW       MOVE.B      #'W',(A4)+      Size info for word data
000028E6  6000 0006                922                  BRA         MOVEM_SPACE
000028EA  18FC 004C                923  D3_MOVEML       MOVE.B      #'L',(A4)+      Size info for longword data
000028EE  18FC 0020                924  MOVEM_SPACE     MOVE.B      #' ',(A4)+
000028F2  18FC 0020                925                  MOVE.B      #' ',(A4)+
000028F6  18FC 0020                926                  MOVE.B      #' ',(A4)+
000028FA  18FC 0020                927                  MOVE.B      #' ',(A4)+
000028FE  18FC 0020                928                  MOVE.B      #' ',(A4)+
00002902  3A07                     929                  MOVE.W      D7,D5
00002904  CA7C 000F                930                  AND.W       #$000F,D5
00002908  BA7C 0008                931                  CMP.W       #$0008,D5       Check if REG to PTR instruction
0000290C  6C00 000C                932                  BGE         MOVEM_CONT
00002910  4EB9 00002CD0            933                  JSR         MOVEM_FLIP      Flip binary bits and store at D1
00002916  6000 0006                934                  BRA         MOVEM_CONT1
0000291A  4241                     935  MOVEM_CONT      CLR         D1              Continue disassembly
0000291C  3215                     936                  MOVE.W      (A5),D1
0000291E  3A07                     937  MOVEM_CONT1     MOVE.W      D7,D5
00002920  0245 0F00                938                  ANDI.W      #$0F00,D5
00002924  BA7C 0800                939                  CMP.W       #$0800,D5
00002928  6600 000A                940                  BNE         MOVEM_CHKPTR    Check Address PTR instruction
0000292C  4EB9 00002944            941                  JSR         MOVEM_REG       Branch to Registries instruction
00002932  4E75                     942                  RTS
00002934  BA7C 0C00                943  MOVEM_CHKPTR    CMP.W       #$0C00,D5
00002938  6600 11D6                944                  BNE         ERROR_1
0000293C  4EB9 000029DC            945                  JSR         MOVEM_PTR       Branch to Address PTR instruction
00002942  4E75                     946                  RTS
00002944                           947                  
00002944                           948  *****************************************************************************
00002944                           949  *MOVEM_REG - CLONE REG TO MEMORY*********************************************
00002944                           950  ****************|***********|***************|********************************
00002944  0C41 0000                951  MOVEM_REG       CMPI.W      #$0000,D1       Check valid register data
00002948  6700 11C6                952                  BEQ         ERROR_1
0000294C  4243                     953                  CLR         D3              Set local variable for 'D'
0000294E  0C01 0000                954                  CMPI.B      #$00,D1         Check if Data Registers in input
00002952  6700 0018                955                  BEQ         MOVEM_REGA      Branch input Address Registers
00002956  4EB9 00002A7A            956                  JSR         MOVEM_PUSHR     Branch input Data Registers
0000295C  3205                     957                  MOVE.W      D5,D1
0000295E  E049                     958                  LSR.W       #$8,D1
00002960  B23C 0000                959                  CMP.B       #$00,D1         Check Address Registers in input
00002964  6700 001A                960                  BEQ         MOVEM_REGM      Branch second half of instruction
00002968  18FC 002F                961                  MOVE.B      #'/',(A4)+
0000296C  3205                     962  MOVEM_REGA      MOVE.W      D5,D1
0000296E  E049                     963                  LSR.W       #$8,D1
00002970  B23C 0000                964                  CMP.B       #$00,D1         Check Address Registers in input
00002974  6700 000A                965                  BEQ         MOVEM_REGM      Branch second half of instruction
00002978  7601                     966                  MOVEQ       #$1,D3          Set local variable for 'A'
0000297A  4EB9 00002A7A            967                  JSR         MOVEM_PUSHR     Branch input Address Registers
00002980  18FC 002C                968  MOVEM_REGM      MOVE.B      #',',(A4)+
00002984  3A07                     969                  MOVE.W      D7,D5
00002986  E94D                     970                  LSL.W       #$4,D5
00002988  BA3C 0080                971                  CMP.B       #$80,D5         Check Address or Register PTR
0000298C  6C00 0018                972                  BGE         MOVEM_S         Branch to Absolute Address
00002990  E80D                     973                  LSR.B       #$4,D5
00002992  4242                     974                  CLR         D2
00002994  1405                     975                  MOVE.B      D5,D2
00002996  4EB9 00003852            976                  JSR         GET_EA_100      Branch to Effective Address
0000299C  548D                     977                  ADDA.L      #$2,A5
0000299E  5346                     978                  SUBI        #$1,D6
000029A0  4EF9 00002CBA            979                  JMP         MOVEM_RET       Complete
000029A6  18FC 0024                980  MOVEM_S         MOVE.B      #'$',(A4)+
000029AA  3A07                     981                  MOVE.W      D7,D5
000029AC  0245 000F                982                  ANDI.W      #$000F,D5
000029B0  BA3C 0008                983                  CMP.B       #$08,D5
000029B4  6700 0012                984                  BEQ         MOVEM_REGW      Fill output with word size data
000029B8  548D                     985                  ADDA.L      #$2,A5
000029BA  5346                     986                  SUBI        #$1,D6
000029BC  4EB9 000036E0            987                  JSR         PUSH_L          Fill output longword size data
000029C2  588D                     988                  ADDA.L      #$4,A5
000029C4  5546                     989                  SUBI        #$2,D6
000029C6  4E75                     990                  RTS                         Complete
000029C8  548D                     991  MOVEM_REGW      ADDA.L      #$2,A5
000029CA  5346                     992                  SUBI        #$1,D6
000029CC  4EB9 000036A8            993                  JSR         PUSH_W          Fill output with word size data
000029D2  548D                     994                  ADDA.L      #$2,A5
000029D4  5346                     995                  SUBI        #$1,D6
000029D6  4EF9 00002CBA            996                  JMP         MOVEM_RET       Complete
000029DC                           997  
000029DC                           998  *****************************************************************************
000029DC                           999  *MOVEM_PTR - FILL REG FROM MEMORY********************************************
000029DC                          1000  ****************|***********|***************|********************************
000029DC  3A07                    1001  MOVEM_PTR       MOVE.W      D7,D5
000029DE  CA7C 00F0               1002                  AND.W       #$00F0,D5
000029E2  0C05 00B0               1003                  CMPI.B      #$B0,D5
000029E6  6700 0024               1004                  BEQ         MOVEM_PTR2
000029EA  0C05 00F0               1005                  CMPI.B      #$F0,D5
000029EE  6700 001C               1006                  BEQ         MOVEM_PTR2
000029F2  4242                    1007                  CLR         D2
000029F4  3407                    1008                  MOVE.W      D7,D2
000029F6  C47C 000F               1009                  AND.W       #$000F,D2
000029FA  5102                    1010                  SUBI.B      #$8,D2
000029FC  4EB9 00003838           1011                  JSR         GET_EA_011
00002A02  3215                    1012                  MOVE.W      (A5),D1
00002A04  548D                    1013                  ADDA.L      #$2,A5
00002A06  5346                    1014                  SUBI        #$1,D6
00002A08  6000 003A               1015                  BRA         MOVEM_PTRD
00002A0C  18FC 0024               1016  MOVEM_PTR2      MOVE.B      #'$',(A4)+
00002A10  3A07                    1017                  MOVE.W      D7,D5
00002A12  0245 000F               1018                  ANDI.W      #$000F,D5
00002A16  BA3C 0008               1019                  CMP.B       #$08,D5
00002A1A  6700 0018               1020                  BEQ         MOVEM_PTRW
00002A1E  3215                    1021                  MOVE.W      (A5),D1
00002A20  548D                    1022                  ADDA.L      #$2,A5
00002A22  5346                    1023                  SUBI        #$1,D6
00002A24  4EB9 000036E0           1024                  JSR         PUSH_L
00002A2A  588D                    1025                  ADDA.L      #$4,A5
00002A2C  5546                    1026                  SUBI        #$2,D6
00002A2E  4EF9 00002A44           1027                  JMP         MOVEM_PTRD
00002A34  3215                    1028  MOVEM_PTRW      MOVE.W      (A5),D1
00002A36  548D                    1029                  ADDA.L      #$2,A5
00002A38  5346                    1030                  SUBI        #$1,D6
00002A3A  4EB9 000036A8           1031                  JSR         PUSH_W
00002A40  548D                    1032                  ADDA.L      #$2,A5
00002A42  5346                    1033                  SUBI        #$1,D6
00002A44  4243                    1034  MOVEM_PTRD      CLR         D3
00002A46  18FC 002C               1035                  MOVE.B      #',',(A4)+
00002A4A  0C41 0000               1036                  CMPI.W      #$0000,D1
00002A4E  6700 10C0               1037                  BEQ         ERROR_1
00002A52  0C01 0000               1038                  CMPI.B      #$00,D1
00002A56  6700 0008               1039                  BEQ         MOVEM_PTRA
00002A5A  4EB9 00002A7A           1040                  JSR         MOVEM_PUSHR
00002A60  3205                    1041  MOVEM_PTRA      MOVE.W      D5,D1
00002A62  E049                    1042                  LSR.W       #$8,D1
00002A64  7601                    1043                  MOVEQ       #$1,D3
00002A66  B23C 0000               1044                  CMP.B       #$00,D1
00002A6A  6700 000C               1045                  BEQ         MOVEM_PTRC
00002A6E  18FC 002F               1046                  MOVE.B      #'/',(A4)+
00002A72  4EB9 00002A7A           1047                  JSR         MOVEM_PUSHR
00002A78  4E75                    1048  MOVEM_PTRC      RTS       
00002A7A                          1049               
00002A7A                          1050  
00002A7A                          1051  *****************************************************************************
00002A7A                          1052  *MOVEM_PUSHR: PUSH REG TO A4 PRINT BUFFER************************************
00002A7A                          1053  ****************|***********|***************|********************************
00002A7A  4240                    1054  MOVEM_PUSHR     CLR         D0
00002A7C  3A01                    1055                  MOVE.W      D1,D5
00002A7E  0241 000F               1056                  ANDI.W      #$000F,D1
00002A82  B23C 0000               1057                  CMP.B       #$0,D1
00002A86  6700 00FE               1058                  BEQ         MOVEM_R4
00002A8A  0241 0001               1059  MOVEM_R0        ANDI.W      #$1,D1
00002A8E  0C01 0001               1060                  CMPI.B      #$1,D1
00002A92  6600 000E               1061                  BNE         MOVEM_R1       
00002A96  4EB9 00002CBC           1062                  JSR         MOVEM_AORD
00002A9C  18FC 0030               1063                  MOVE.B      #'0',(A4)+
00002AA0  7001                    1064                  MOVEQ       #$1,D0
00002AA2  3205                    1065  MOVEM_R1        MOVE.W      D5,D1
00002AA4  0241 0002               1066                  ANDI.W      #$0002,D1
00002AA8  0C01 0002               1067                  CMPI.B      #$2,D1
00002AAC  6600 0034               1068                  BNE         MOVEM_R2
00002AB0  0C00 0001               1069                  CMPI.B      #$1,D0
00002AB4  6600 001E               1070                  BNE         MOVEM_R1C
00002AB8  103C 0002               1071                  MOVE.B      #$2,D0
00002ABC  3205                    1072                  MOVE.W      D5,D1
00002ABE  0241 0004               1073                  ANDI.W      #$0004,D1
00002AC2  0C01 0004               1074                  CMPI.B      #$4,D1
00002AC6  6600 0008               1075                  BNE         MOVEM_R1CS
00002ACA  4EF9 00002AE2           1076                  JMP         MOVEM_R2
00002AD0  18FC 002D               1077  MOVEM_R1CS      MOVE.B      #'-',(A4)+
00002AD4  4EB9 00002CBC           1078  MOVEM_R1C       JSR         MOVEM_AORD
00002ADA  103C 0002               1079                  MOVE.B      #$2,D0
00002ADE  18FC 0031               1080                  MOVE.B      #'1',(A4)+ 
00002AE2  3205                    1081  MOVEM_R2        MOVE.W      D5,D1
00002AE4  0241 0004               1082                  ANDI.W      #$0004,D1
00002AE8  0C01 0004               1083                  CMPI.B      #$4,D1
00002AEC  6600 0046               1084                  BNE         MOVEM_R3
00002AF0  0C00 0002               1085                  CMPI.B      #$2,D0
00002AF4  6600 0024               1086                  BNE         MOVEM_R2C
00002AF8  103C 0004               1087                  MOVE.B      #$4,D0
00002AFC  3205                    1088                  MOVE.W      D5,D1
00002AFE  0241 0008               1089                  ANDI.W      #$0008,D1
00002B02  0C01 0008               1090                  CMPI.B      #$8,D1
00002B06  6600 0008               1091                  BNE         MOVEM_R2CD
00002B0A  4EF9 00002B34           1092                  JMP         MOVEM_R3
00002B10  18FC 002D               1093  MOVEM_R2CD      MOVE.B      #'-',(A4)+
00002B14  4EF9 00002B26           1094                  JMP         MOVEM_R2C1
00002B1A  0C00 0000               1095  MOVEM_R2C       CMPI.B      #$0,D0
00002B1E  6700 0006               1096                  BEQ         MOVEM_R2C1
00002B22  18FC 002F               1097                  MOVE.B      #'/',(A4)+
00002B26  4EB9 00002CBC           1098  MOVEM_R2C1      JSR         MOVEM_AORD
00002B2C  103C 0004               1099                  MOVE.B      #$4,D0
00002B30  18FC 0032               1100                  MOVE.B      #'2',(A4)+ 
00002B34  3205                    1101  MOVEM_R3        MOVE.W      D5,D1
00002B36  0241 0008               1102                  ANDI.W      #$0008,D1
00002B3A  0C01 0008               1103                  CMPI.B      #$8,D1
00002B3E  6600 0046               1104                  BNE         MOVEM_R4
00002B42  0C00 0004               1105                  CMPI.B      #$4,D0
00002B46  6600 0024               1106                  BNE         MOVEM_R3C
00002B4A  103C 0008               1107                  MOVE.B      #$8,D0
00002B4E  3205                    1108                  MOVE.W      D5,D1
00002B50  0241 0010               1109                  ANDI.W      #$0010,D1
00002B54  0C01 0010               1110                  CMPI.B      #$10,D1
00002B58  6600 0008               1111                  BNE         MOVEM_R3CD
00002B5C  4EF9 00002B86           1112                  JMP         MOVEM_R4
00002B62  18FC 002D               1113  MOVEM_R3CD      MOVE.B      #'-',(A4)+
00002B66  4EF9 00002B78           1114                  JMP         MOVEM_R3C1
00002B6C  0C00 0000               1115  MOVEM_R3C       CMPI.B      #$0,D0
00002B70  6700 0006               1116                  BEQ         MOVEM_R3C1
00002B74  18FC 002F               1117                  MOVE.B      #'/',(A4)+
00002B78  4EB9 00002CBC           1118  MOVEM_R3C1      JSR         MOVEM_AORD
00002B7E  103C 0008               1119                  MOVE.B      #$8,D0
00002B82  18FC 0033               1120                  MOVE.B      #'3',(A4)+ 
00002B86  3205                    1121  MOVEM_R4        MOVE.W      D5,D1
00002B88  0241 0010               1122                  ANDI.W      #$0010,D1
00002B8C  B23C 0010               1123                  CMP.B       #$10,D1
00002B90  6600 0046               1124                  BNE         MOVEM_R5
00002B94  0C00 0008               1125                  CMPI.B      #$8,D0
00002B98  6600 0024               1126                  BNE         MOVEM_R4C
00002B9C  103C 0010               1127                  MOVE.B      #$10,D0
00002BA0  3205                    1128                  MOVE.W      D5,D1
00002BA2  0241 0020               1129                  ANDI.W      #$0020,D1
00002BA6  B23C 0020               1130                  CMP.B       #$20,D1
00002BAA  6600 0008               1131                  BNE         MOVEM_R4CD
00002BAE  4EF9 00002BD8           1132                  JMP         MOVEM_R5
00002BB4  18FC 002D               1133  MOVEM_R4CD      MOVE.B      #'-',(A4)+
00002BB8  4EF9 00002BCA           1134                  JMP         MOVEM_R4C1
00002BBE  0C00 0000               1135  MOVEM_R4C       CMPI.B      #$0,D0
00002BC2  6700 0006               1136                  BEQ         MOVEM_R4C1
00002BC6  18FC 002F               1137                  MOVE.B      #'/',(A4)+
00002BCA  4EB9 00002CBC           1138  MOVEM_R4C1      JSR         MOVEM_AORD
00002BD0  103C 0010               1139                  MOVE.B      #$10,D0
00002BD4  18FC 0034               1140                  MOVE.B      #'4',(A4)+
00002BD8  3205                    1141  MOVEM_R5        MOVE.W      D5,D1
00002BDA  0241 0020               1142                  ANDI.W      #$0020,D1
00002BDE  B23C 0020               1143                  CMP.B       #$20,D1
00002BE2  6600 0046               1144                  BNE         MOVEM_R6
00002BE6  0C00 0010               1145                  CMPI.B      #$10,D0
00002BEA  6600 0024               1146                  BNE         MOVEM_R5C
00002BEE  103C 0020               1147                  MOVE.B      #$20,D0
00002BF2  3205                    1148                  MOVE.W      D5,D1
00002BF4  0241 0040               1149                  ANDI.W      #$0040,D1
00002BF8  B23C 0040               1150                  CMP.B       #$40,D1
00002BFC  6600 0008               1151                  BNE         MOVEM_R5CD
00002C00  4EF9 00002C2A           1152                  JMP         MOVEM_R6
00002C06  18FC 002D               1153  MOVEM_R5CD      MOVE.B      #'-',(A4)+
00002C0A  4EF9 00002C1C           1154                  JMP         MOVEM_R5C1
00002C10  0C00 0000               1155  MOVEM_R5C       CMPI.B      #$0,D0
00002C14  6700 0006               1156                  BEQ         MOVEM_R5C1
00002C18  18FC 002F               1157                  MOVE.B      #'/',(A4)+
00002C1C  4EB9 00002CBC           1158  MOVEM_R5C1      JSR         MOVEM_AORD
00002C22  103C 0020               1159                  MOVE.B      #$20,D0
00002C26  18FC 0035               1160                  MOVE.B      #'5',(A4)+
00002C2A  3205                    1161  MOVEM_R6        MOVE.W      D5,D1
00002C2C  0241 0040               1162                  ANDI.W      #$0040,D1
00002C30  B23C 0040               1163                  CMP.B       #$40,D1
00002C34  6600 0046               1164                  BNE         MOVEM_R7
00002C38  0C00 0020               1165                  CMPI.B      #$20,D0
00002C3C  6600 0024               1166                  BNE         MOVEM_R6C
00002C40  103C 0040               1167                  MOVE.B      #$40,D0
00002C44  3205                    1168                  MOVE.W      D5,D1
00002C46  0241 0080               1169                  ANDI.W      #$0080,D1
00002C4A  B23C 0080               1170                  CMP.B       #$80,D1
00002C4E  6600 0008               1171                  BNE         MOVEM_R6CD
00002C52  4EF9 00002C7C           1172                  JMP         MOVEM_R7
00002C58  18FC 002D               1173  MOVEM_R6CD      MOVE.B      #'-',(A4)+
00002C5C  4EF9 00002C6E           1174                  JMP         MOVEM_R6C1
00002C62  0C00 0000               1175  MOVEM_R6C       CMPI.B      #$0,D0
00002C66  6700 0006               1176                  BEQ         MOVEM_R6C1
00002C6A  18FC 002F               1177                  MOVE.B      #'/',(A4)+
00002C6E  4EB9 00002CBC           1178  MOVEM_R6C1      JSR         MOVEM_AORD
00002C74  103C 0040               1179                  MOVE.B      #$40,D0
00002C78  18FC 0036               1180                  MOVE.B      #'6',(A4)+
00002C7C  3205                    1181  MOVEM_R7        MOVE.W      D5,D1
00002C7E  0241 0080               1182                  ANDI.W      #$0080,D1
00002C82  B23C 0080               1183                  CMP.B       #$80,D1
00002C86  6600 0032               1184                  BNE         MOVEM_RET
00002C8A  0C00 0040               1185                  CMPI.B      #$40,D0
00002C8E  6600 0014               1186                  BNE         MOVEM_R7C
00002C92  4EF9 00002C9A           1187                  JMP         MOVEM_R7CD
00002C98  4E75                    1188                  RTS
00002C9A  18FC 002D               1189  MOVEM_R7CD      MOVE.B      #'-',(A4)+
00002C9E  4EF9 00002CB0           1190                  JMP         MOVEM_R7C1
00002CA4  0C00 0000               1191  MOVEM_R7C       CMPI.B      #$0,D0
00002CA8  6700 0006               1192                  BEQ         MOVEM_R7C1
00002CAC  18FC 002F               1193                  MOVE.B      #'/',(A4)+
00002CB0  4EB9 00002CBC           1194  MOVEM_R7C1      JSR         MOVEM_AORD
00002CB6  18FC 0037               1195                  MOVE.B      #'7',(A4)+
00002CBA  4E75                    1196  MOVEM_RET       RTS
00002CBC                          1197                  
00002CBC  0C03 0000               1198  MOVEM_AORD      CMPI.B      #$0,D3
00002CC0  6600 0008               1199                  BNE         MOVEM_ANOTD
00002CC4  18FC 0044               1200                  MOVE.B      #'D',(A4)+
00002CC8  4E75                    1201                  RTS
00002CCA  18FC 0041               1202  MOVEM_ANOTD     MOVE.B      #'A',(A4)+
00002CCE  4E75                    1203                  RTS
00002CD0                          1204       
00002CD0                          1205  *****************************************************************************
00002CD0                          1206  *MOVEM_FLIP: FLIPS THE BITS OF THE REGISTRY DATA FOR REG INTO POINTER********
00002CD0                          1207  ****************|***********|***************|********************************
00002CD0  4240                    1208  MOVEM_FLIP      CLR         D0
00002CD2  4241                    1209                  CLR         D1
00002CD4  3015                    1210                  MOVE.W      (A5),D0
00002CD6  C07C 000F               1211                  AND.W       #$000F,D0       Get least significant bit
00002CDA  4EB9 00002D14           1212                  JSR         DO_FLIP         Flip binary bits
00002CE0  E959                    1213                  ROL.W       #$4,D1          Move to most significant
00002CE2  3015                    1214                  MOVE.W      (A5),D0         
00002CE4  E858                    1215                  ROR.W       #$4,D0          
00002CE6  C07C 000F               1216                  AND.W       #$000F,D0       Get 3rd bit
00002CEA  4EB9 00002D14           1217                  JSR         DO_FLIP         Flip binary bits
00002CF0  E959                    1218                  ROL.W       #$4,D1          Move to bit 2
00002CF2  3015                    1219                  MOVE.W      (A5),D0
00002CF4  E058                    1220                  ROR.W       #$8,D0
00002CF6  C07C 000F               1221                  AND.W       #$000F,D0       Get 2nd bit
00002CFA  4EB9 00002D14           1222                  JSR         DO_FLIP         Flip binary bits
00002D00  E959                    1223                  ROL.W       #$4,D1          Move to bit3
00002D02  3015                    1224                  MOVE.W      (A5),D0
00002D04  E058                    1225                  ROR.W       #$8,D0
00002D06  E858                    1226                  ROR.W       #$4,D0
00002D08  C07C 000F               1227                  AND.W       #$000F,D0       Get most significant bit
00002D0C  4EB9 00002D14           1228                  JSR         DO_FLIP         Flip binary bits
00002D12  4E75                    1229                  RTS                         Return inverted binary code
00002D14                          1230  
00002D14  0C00 0000               1231  DO_FLIP         CMPI.B      #$0,D0          Read 0
00002D18  6600 0008               1232                  BNE         DO_FLIP1
00002D1C  0601 0000               1233                  ADD.B       #$00,D1         Write 0
00002D20  4E75                    1234                  RTS      
00002D22  0C00 0001               1235  DO_FLIP1        CMPI.B      #$1,D0          Read 1
00002D26  6600 0006               1236                  BNE         DO_FLIP2
00002D2A  5001                    1237                  ADD.B       #$08,D1         Write 8
00002D2C  4E75                    1238                  RTS
00002D2E  0C00 0002               1239  DO_FLIP2        CMPI.B      #$2,D0          Read 2
00002D32  6600 0006               1240                  BNE         DO_FLIP3
00002D36  5801                    1241                  ADD.B       #$04,D1         Write 4
00002D38  4E75                    1242                  RTS
00002D3A  0C00 0003               1243  DO_FLIP3        CMPI.B      #$3,D0          Read 3
00002D3E  6600 0008               1244                  BNE         DO_FLIP4
00002D42  0601 000C               1245                  ADD.B       #$0C,D1         Write C
00002D46  4E75                    1246                  RTS
00002D48  0C00 0004               1247  DO_FLIP4        CMPI.B      #$4,D0          Read 4
00002D4C  6600 0006               1248                  BNE         DO_FLIP5
00002D50  5401                    1249                  ADD.B       #$02,D1         Write 2
00002D52  4E75                    1250                  RTS
00002D54  0C00 0005               1251  DO_FLIP5        CMPI.B      #$5,D0          Read 5
00002D58  6600 0008               1252                  BNE         DO_FLIP6
00002D5C  0601 000A               1253                  ADD.B       #$0A,D1         Write A
00002D60  4E75                    1254                  RTS
00002D62  0C00 0006               1255  DO_FLIP6        CMPI.B      #$6,D0          Read 6
00002D66  6600 0006               1256                  BNE         DO_FLIP7
00002D6A  5C01                    1257                  ADD.B       #$06,D1         Write 6
00002D6C  4E75                    1258                  RTS
00002D6E  0C00 0007               1259  DO_FLIP7        CMPI.B      #$7,D0          Read 7
00002D72  6600 0008               1260                  BNE         DO_FLIP8
00002D76  0601 000E               1261                  ADD.B       #$0E,D1         Write E
00002D7A  4E75                    1262                  RTS
00002D7C  0C00 0008               1263  DO_FLIP8        CMPI.B      #$8,D0          Read 8
00002D80  6600 0006               1264                  BNE         DO_FLIP9
00002D84  5201                    1265                  ADD.B       #$01,D1         Write 1
00002D86  4E75                    1266                  RTS
00002D88  0C00 0009               1267  DO_FLIP9        CMPI.B      #$9,D0          Read 9
00002D8C  6600 0008               1268                  BNE         DO_FLIPA
00002D90  0601 0009               1269                  ADD.B       #$09,D1         Write 9
00002D94  4E75                    1270                  RTS
00002D96  0C00 000A               1271  DO_FLIPA        CMPI.B      #$A,D0          Read A
00002D9A  6600 0006               1272                  BNE         DO_FLIPB
00002D9E  5A01                    1273                  ADD.B       #$05,D1         Write 5
00002DA0  4E75                    1274                  RTS
00002DA2  0C00 000B               1275  DO_FLIPB        CMPI.B      #$B,D0          Read B
00002DA6  6600 0008               1276                  BNE         DO_FLIPC
00002DAA  0601 000D               1277                  ADD.B       #$0D,D1         Write D
00002DAE  4E75                    1278                  RTS
00002DB0  0C00 000C               1279  DO_FLIPC        CMPI.B      #$C,D0          Read C
00002DB4  6600 0006               1280                  BNE         DO_FLIPD
00002DB8  5601                    1281                  ADD.B       #$03,D1         Write 3
00002DBA  4E75                    1282                  RTS
00002DBC  0C00 000D               1283  DO_FLIPD        CMPI.B      #$D,D0          Read D
00002DC0  6600 0008               1284                  BNE         DO_FLIPE
00002DC4  0601 000B               1285                  ADD.B       #$0B,D1         Write B
00002DC8  4E75                    1286                  RTS
00002DCA  0C00 000E               1287  DO_FLIPE        CMPI.B      #$E,D0          Read E
00002DCE  6600 0006               1288                  BNE         DO_FLIPF
00002DD2  5E01                    1289                  ADD.B       #$07,D1         Write 7
00002DD4  4E75                    1290                  RTS
00002DD6  0C00 000F               1291  DO_FLIPF        CMPI.B      #$F,D0          Read F
00002DDA  6600 0D34               1292                  BNE         ERROR_1
00002DDE  0601 000F               1293                  ADD.B       #$0F,D1         Write F
00002DE2  4E75                    1294                  RTS                
00002DE4                          1295             
00002DE4                          1296  *****************************************************************************
00002DE4                          1297  *D3_1110*********************************************************************
00002DE4                          1298  ****************|***********|***************|********************************
00002DE4  4EB9 0000366C           1299  D3_1110         JSR         DATA_SIZE       Get size of data
00002DEA  B43C 0002               1300                  CMP.B       #$2,D2          Check if JSR instruction
00002DEE  6700 0066               1301                  BEQ         D3_1110JSR
00002DF2  B43C 0003               1302                  CMP.B       #$3,D2          Check if JMP instruction
00002DF6  6700 0010               1303                  BEQ         D3_1110JMP
00002DFA  B43C 0001               1304                  CMP.B       #$1,D2          Check if NOP or RTS instruction
00002DFE  6700 00A4               1305                  BEQ         D3_1110NOPRTS
00002E02  6000 0D0C               1306                  BRA         ERROR_1
00002E06  4E75                    1307                  RTS         
00002E08  18FC 004A               1308  D3_1110JMP      MOVE.B      #'J',(A4)+      Push JMP to A4 buffer
00002E0C  18FC 004D               1309                  MOVE.B      #'M',(A4)+ 
00002E10  18FC 0050               1310                  MOVE.B      #'P',(A4)+ 
00002E14  4EB9 00003C76           1311                  JSR         A4_6SPACES 
00002E1A  18FC 0020               1312                  MOVE.B      #' ',(A4)+ 
00002E1E  18FC 0020               1313                  MOVE.B      #' ',(A4)+ 
00002E22  18FC 0020               1314                  MOVE.B      #' ',(A4)+ 
00002E26  4EB9 00003798           1315                  JSR         EFFECTIVE_ADDR  Find effective address
00002E2C  B83C 0000               1316                  CMP.B       #$0,D4          Check for error state
00002E30  6700 0CDE               1317                  BEQ         ERROR_1 
00002E34  B63C 0000               1318                  CMP.B       #$0,D3          Check for valid addressing mode
00002E38  6700 0CD6               1319                  BEQ         ERROR_1         
00002E3C  B63C 0001               1320                  CMP.B       #$1,D3
00002E40  6700 0CCE               1321                  BEQ         ERROR_1
00002E44  B63C 0003               1322                  CMP.B       #$3,D3
00002E48  6700 0CC6               1323                  BEQ         ERROR_1
00002E4C  B63C 0004               1324                  CMP.B       #$4,D3
00002E50  6700 0CBE               1325                  BEQ         ERROR_1
00002E54  4E75                    1326                  RTS 
00002E56  18FC 004A               1327  D3_1110JSR      MOVE.B      #'J',(A4)+      Push JSR to A4 buffer
00002E5A  18FC 0053               1328                  MOVE.B      #'S',(A4)+
00002E5E  18FC 0052               1329                  MOVE.B      #'R',(A4)+
00002E62  4EB9 00003C76           1330                  JSR         A4_6SPACES
00002E68  18FC 0020               1331                  MOVE.B      #' ',(A4)+
00002E6C  18FC 0020               1332                  MOVE.B      #' ',(A4)+
00002E70  18FC 0020               1333                  MOVE.B      #' ',(A4)+
00002E74  4EB9 00003798           1334                  JSR         EFFECTIVE_ADDR  Find effective address
00002E7A  B83C 0000               1335                  CMP.B       #$0,D4          Check for error state
00002E7E  6700 0C90               1336                  BEQ         ERROR_1 
00002E82  BA3C 0000               1337                  CMP.B       #$0,D5          Check for valid addressing mode
00002E86  6700 0C88               1338                  BEQ         ERROR_1
00002E8A  BA3C 0001               1339                  CMP.B       #$1,D5
00002E8E  6700 0C80               1340                  BEQ         ERROR_1 
00002E92  BA3C 0003               1341                  CMP.B       #$3,D5
00002E96  6700 0C78               1342                  BEQ         ERROR_1 
00002E9A  BA3C 0004               1343                  CMP.B       #$4,D5
00002E9E  6700 0C70               1344                  BEQ         ERROR_1 
00002EA2  4E75                    1345                  RTS
00002EA4  3407                    1346  D3_1110NOPRTS   MOVE.W      D7,D2           Move current OPCODE from D7 to D2
00002EA6  0242 0007               1347                  ANDI        #$0007,D2       Chop off unneeded data
00002EAA  B43C 0001               1348                  CMP.B       #$1,D2          Check if NOP instruction
00002EAE  6700 0010               1349                  BEQ         D3_1110NOP
00002EB2  B43C 0005               1350                  CMP.B       #$5,D2          Check if RTS instruction
00002EB6  6700 0016               1351                  BEQ         D3_1110RTS  
00002EBA  6000 0C54               1352                  BRA         ERROR_1
00002EBE  4E75                    1353                  RTS
00002EC0  18FC 004E               1354  D3_1110NOP      MOVE.B      #'N',(A4)+      Push NOP to A4 buffer
00002EC4  18FC 004F               1355                  MOVE.B      #'O',(A4)+ 
00002EC8  18FC 0050               1356                  MOVE.B      #'P',(A4)+
00002ECC  4E75                    1357                  RTS
00002ECE  18FC 0052               1358  D3_1110RTS      MOVE.B      #'R',(A4)+      Push RTS to A4 buffer
00002ED2  18FC 0054               1359                  MOVE.B      #'T',(A4)+
00002ED6  18FC 0053               1360                  MOVE.B      #'S',(A4)+
00002EDA  4E75                    1361                  RTS
00002EDC                          1362  
00002EDC                          1363  *****************************************************************************
00002EDC                          1364  *BIT_FOUR********************************************************************
00002EDC                          1365  ****************|***********|***************|********************************
00002EDC  0C05 0004               1366  BIT_FOUR        CMPI.B      #$4,D5          Check if instruction is 0100      
00002EE0  6700 001A               1367                  BEQ         D4_0100        
00002EE4  0C05 000E               1368                  CMPI.B      #$E,D5          Check if instruction is 1110
00002EE8  6700 0022               1369                  BEQ         D4_1110
00002EEC  0C05 000F               1370                  CMPI.B      #$F,D5          Check if instruction is 1111                
00002EF0  6700 002A               1371                  BEQ         D4_1111
00002EF4  4EB9 00003B10           1372                  JSR         ERROR_1
00002EFA  4E75                    1373  BIT_FOUR_DONE   RTS
00002EFC                          1374  
00002EFC                          1375  *****************************************************************************
00002EFC                          1376  *D4_0100 - BCC INSTRUCTION***************************************************
00002EFC                          1377  ****************|***********|***************|********************************
00002EFC  18FC 0042               1378  D4_0100         MOVE.B      #'B',(A4)+      Push BCC to A4 buffer
00002F00  18FC 0043               1379                  MOVE.B      #'C',(A4)+
00002F04  18FC 0043               1380                  MOVE.B      #'C',(A4)+
00002F08  6000 05C8               1381                  BRA         BRA_ADDR        Get branch address
00002F0C                          1382  
00002F0C                          1383  *****************************************************************************
00002F0C                          1384  *D4_1110*********************************************************************
00002F0C                          1385  ****************|***********|***************|********************************
00002F0C  18FC 0042               1386  D4_1110         MOVE.B      #'B',(A4)+      Push BGT into buffer A4
00002F10  18FC 0047               1387                  MOVE.B      #'G',(A4)+      
00002F14  18FC 0054               1388                  MOVE.B      #'T',(A4)+   
00002F18  6000 05B8               1389                  BRA         BRA_ADDR        Get branch address
00002F1C                          1390  
00002F1C                          1391  *****************************************************************************
00002F1C                          1392  *D4_1111*********************************************************************
00002F1C                          1393  ****************|***********|***************|********************************
00002F1C  18FC 0042               1394  D4_1111         MOVE.B      #'B',(A4)+      Push BLE to A4 buffer
00002F20  18FC 004C               1395                  MOVE.B      #'L',(A4)+
00002F24  18FC 0045               1396                  MOVE.B      #'E',(A4)+
00002F28  6000 05A8               1397                  BRA         BRA_ADDR        Get branch address
00002F2C                          1398  
00002F2C                          1399  *****************************************************************************
00002F2C                          1400  *BIT_FIVE********************************************************************
00002F2C                          1401  ****************|***********|***************|********************************
00002F2C  0C02 0000               1402  BIT_FIVE        CMPI.B      #$0,D2          Check if data at D2 is 000               
00002F30  6700 0048               1403                  BEQ         D5_000
00002F34  0C02 0001               1404                  CMPI.B      #$1,D2          Check if data at D2 is 001               
00002F38  6700 0050               1405                  BEQ         D5_001
00002F3C  0C02 0002               1406                  CMPI.B      #$2,D2          Check if data at D2 is 010               
00002F40  6700 0056               1407                  BEQ         D5_010
00002F44  0C02 0003               1408                  CMPI.B      #$3,D2          Check if data at D2 is 011
00002F48  6700 005E               1409                  BEQ         D5_011
00002F4C  0C02 0004               1410                  CMPI.B      #$4,D2          Check if data at D2 is 100               
00002F50  6700 00E4               1411                  BEQ         D5_100
00002F54  0C02 0005               1412                  CMPI.B      #$5,D2          Check if data at D2 is 101               
00002F58  6700 00E8               1413                  BEQ         D5_101
00002F5C  0C02 0006               1414                  CMPI.B      #$6,D2          Check if data at D2 is 110               
00002F60  6700 00EC               1415                  BEQ         D5_110
00002F64  4EB9 00003B10           1416                  JSR         ERROR_1
00002F6A  4E75                    1417  BIT_FIVE_DONE   RTS
00002F6C                          1418  
00002F6C                          1419  *****************************************************************************
00002F6C                          1420  *FILL_OR: SAVES ON LINES OF CODE*********************************************
00002F6C                          1421  ****************|***********|***************|********************************
00002F6C  18FC 004F               1422  FILL_OR         MOVE.B      #'O',(A4)+      Push OR to A4 buffer
00002F70  18FC 0052               1423                  MOVE.B      #'R',(A4)+
00002F74  18FC 002E               1424                  MOVE.B      #'.',(A4)+
00002F78  4E75                    1425                  RTS
00002F7A                          1426                  
00002F7A                          1427  *****************************************************************************
00002F7A                          1428  *D5_000 - OR.B INSTRUCTION: INTO DATA REG************************************
00002F7A                          1429  ****************|***********|***************|********************************
00002F7A  4EB8 2F6C               1430  D5_000          JSR         FILL_OR      Push OR.B to A4 buffer
00002F7E  18FC 0042               1431                  MOVE.B      #'B',(A4)+
00002F82  70FF                    1432                  MOVE.L      #$FFFFFFFF,D0
00002F84  4EF9 00002FBE           1433                  JMP         D5_HLPR1
00002F8A                          1434                  
00002F8A                          1435  *****************************************************************************
00002F8A                          1436  *D5_001 - OR.W INSTRUCTION: INTO DATA REG************************************
00002F8A                          1437  ****************|***********|***************|********************************
00002F8A  4EB8 2F6C               1438  D5_001          JSR         FILL_OR      Push OR.W to A4 buffer
00002F8E  18FC 0057               1439                  MOVE.B      #'W',(A4)+
00002F92  4EF9 00002FBE           1440                  JMP         D5_HLPR1
00002F98                          1441  
00002F98                          1442  *****************************************************************************
00002F98                          1443  *D5_010 - OR.L INSTRUCTION: INTO DATA REG************************************
00002F98                          1444  ****************|***********|***************|********************************
00002F98  4EB8 2F6C               1445  D5_010          JSR         FILL_OR      Push OR.L to A4 buffer
00002F9C  18FC 004C               1446                  MOVE.B      #'L',(A4)+
00002FA0  5244                    1447                  ADDQ.W      #$1,D4
00002FA2  4EF9 00002FBE           1448                  JMP         D5_HLPR1
00002FA8                          1449                  
00002FA8                          1450  *****************************************************************************
00002FA8                          1451  *D5_011 - DIVU INSTRUCTION: INTO DATA REG************************************
00002FA8                          1452  ****************|***********|***************|********************************
00002FA8  18FC 0044               1453  D5_011          MOVE.B      #'D',(A4)+      Push DIVU to A4 buffer
00002FAC  18FC 0049               1454                  MOVE.B      #'I',(A4)+
00002FB0  18FC 0056               1455                  MOVE.B      #'V',(A4)+
00002FB4  18FC 0055               1456                  MOVE.B      #'U',(A4)+
00002FB8  4EF9 00002FBE           1457                  JMP         D5_HLPR1
00002FBE                          1458  
00002FBE                          1459  *****************************************************************************
00002FBE                          1460  *D5_HLPR: FILL IN SECOND PART OF INSTRUCTION*********************************
00002FBE                          1461  ****************|***********|***************|********************************
00002FBE  4EB9 00003C76           1462  D5_HLPR1        JSR         A4_6SPACES      Push spaces to A4 buffer
00002FC4  18FC 0020               1463                  MOVE.B      #' ',(A4)+
00002FC8  18FC 0020               1464                  MOVE.B      #' ',(A4)+
00002FCC  4EB9 00003798           1465                  JSR         EFFECTIVE_ADDR  Find effective address
00002FD2  0C04 0000               1466                  CMPI.B      #$0,D4          Check error state
00002FD6  6700 0B38               1467                  BEQ         ERROR_1
00002FDA  0C03 0001               1468                  CMPI.B      #$1,D3          Check valid address mode
00002FDE  6700 0B30               1469                  BEQ         ERROR_1
00002FE2  18FC 002C               1470                  MOVE.B      #',',(A4)+      Push data register to A4 buffer
00002FE6  18FC 0044               1471                  MOVE.B      #'D',(A4)+
00002FEA  4EB9 00003778           1472                  JSR         GET_REG2
00002FF0  4EB9 0000396C           1473                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00002FF6  4EF8 2F6A               1474                  JMP         BIT_FIVE_DONE
00002FFA                          1475                  
00002FFA  4EB9 00003C76           1476  D5_HLPR2        JSR         A4_6SPACES      Push spaces to A4 buffer
00003000  18FC 0020               1477                  MOVE.B      #' ',(A4)+
00003004  18FC 0020               1478                  MOVE.B      #' ',(A4)+
00003008  18FC 0044               1479                  MOVE.B      #'D',(A4)+
0000300C  4EB9 00003778           1480                  JSR         GET_REG2        Get data reg number
00003012                          1481  
00003012  4EB9 0000396C           1482                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00003018  18FC 002C               1483                  MOVE.B      #',',(A4)+
0000301C  4EB9 00003798           1484                  JSR         EFFECTIVE_ADDR  Find effective address
00003022  0C04 0000               1485                  CMPI.B      #$0,D4          Check error state
00003026  6700 0AE8               1486                  BEQ         ERROR_1
0000302A  0C03 0001               1487                  CMPI.B      #$1,D3          Check valid address mode
0000302E  6700 0AE0               1488                  BEQ         ERROR_1
00003032  4EF8 2F6A               1489                  JMP         BIT_FIVE_DONE
00003036                          1490  
00003036                          1491  *****************************************************************************
00003036                          1492  *D5_100 - OR.B INSTRUCTION: INTO EFFECTIVE ADDRESS***************************
00003036                          1493  ****************|***********|***************|********************************
00003036  4EB8 2F6C               1494  D5_100          JSR         FILL_OR      Push OR.B to A4 buffer
0000303A  18FC 0042               1495                  MOVE.B      #'B',(A4)+
0000303E  4EF8 2FFA               1496                  JMP         D5_HLPR2
00003042                          1497                  
00003042                          1498  *****************************************************************************
00003042                          1499  *D5_101 - OR.W INSTRUCTION: INTO EFFECTIVE ADDRESS***************************
00003042                          1500  ****************|***********|***************|********************************
00003042  4EB8 2F6C               1501  D5_101          JSR         FILL_OR      Push OR.W to A4 buffer
00003046  18FC 0057               1502                  MOVE.B      #'W',(A4)+
0000304A  4EF8 2FFA               1503                  JMP         D5_HLPR2
0000304E                          1504  
0000304E                          1505  *****************************************************************************
0000304E                          1506  *D5_110 - OR.L INSTRUCTION: INTO EFFECTIVEE ADDRESS**************************
0000304E                          1507  ****************|***********|***************|********************************
0000304E  4EB8 2F6C               1508  D5_110          JSR         FILL_OR      Push OR.L to A4 buffer
00003052  18FC 004C               1509                  MOVE.B      #'L',(A4)+
00003056  4EF8 2FFA               1510                  JMP         D5_HLPR2
0000305A                          1511  
0000305A                          1512  *****************************************************************************
0000305A                          1513  *BIT_SIX*********************************************************************
0000305A                          1514  ****************|***********|***************|********************************
0000305A  0C02 0000               1515  BIT_SIX         CMPI.B      #$0,D2          Check if data at D2 is 000
0000305E  6700 0054               1516                  BEQ         D6_000
00003062  0C02 0001               1517                  CMPI.B      #$1,D2          Check if data at D2 is 001
00003066  6700 005A               1518                  BEQ         D6_001    
0000306A  0C02 0002               1519                  CMPI.B      #$2,D2          Check if data at D2 is 010
0000306E  6700 0060               1520                  BEQ         D6_010
00003072  0C02 0003               1521                  CMPI.B      #$3,D2          Check if data at D2 is 011
00003076  6700 0068               1522                  BEQ         D6_011        
0000307A  0C02 0004               1523                  CMPI.B      #$4,D2          Check if data at D2 is 100
0000307E  6700 00EA               1524                  BEQ         D6_100 
00003082  0C02 0005               1525                  CMPI.B      #$5,D2          Check if data at D2 is 101
00003086  6700 00EE               1526                  BEQ         D6_101 
0000308A  0C02 0006               1527                  CMPI.B      #$6,D2          Check if data at D2 is 110
0000308E  6700 00F2               1528                  BEQ         D6_110
00003092  0C02 0007               1529                  CMPI.B      #$7,D2
00003096  6700 00F6               1530                  BEQ         D6_111          
0000309A  4EB9 00003B10           1531                  JSR         ERROR_1
000030A0  4E75                    1532  BIT_SIX_DONE    RTS
000030A2                          1533  
000030A2                          1534  *****************************************************************************
000030A2                          1535  *FILL_AND: SAVING LINES OF CODE**********************************************
000030A2                          1536  ****************|***********|***************|********************************
000030A2  18FC 0041               1537  FILL_AND        MOVE.B      #'A',(A4)+      Push AND. to A4 buffer
000030A6  18FC 004E               1538                  MOVE.B      #'N',(A4)+
000030AA  18FC 0044               1539                  MOVE.B      #'D',(A4)+
000030AE  18FC 002E               1540                  MOVE.B      #'.',(A4)+
000030B2  4E75                    1541                  RTS
000030B4                          1542  
000030B4                          1543  *****************************************************************************
000030B4                          1544  *D6_000 - AND.B INSTRUCTION: INTO DATA REG***********************************
000030B4                          1545  ****************|***********|***************|********************************
000030B4  4EB8 30A2               1546  D6_000          JSR         FILL_AND        Push AND.B to A4 buffer
000030B8  18FC 0042               1547                  MOVE.B      #'B',(A4)+
000030BC  4EF9 000030FA           1548                  JMP         D6_HLPR1
000030C2                          1549  
000030C2                          1550  *****************************************************************************
000030C2                          1551  *D6_001 - AND.W INSTRUCTION: INTO DATA REG***********************************
000030C2                          1552  ****************|***********|***************|********************************
000030C2  4EB8 30A2               1553  D6_001          JSR         FILL_AND        Push AND.W to A4 buffer
000030C6  18FC 0057               1554                  MOVE.B      #'W',(A4)+
000030CA  4EF9 000030FA           1555                  JMP         D6_HLPR1
000030D0                          1556  
000030D0                          1557  *****************************************************************************
000030D0                          1558  *D6_010 - AND.L INSTRUCTION: INTO DATA REG***********************************
000030D0                          1559  ****************|***********|***************|********************************
000030D0  4EB8 30A2               1560  D6_010          JSR         FILL_AND        Push AND.L to A4 buffer
000030D4  18FC 004C               1561                  MOVE.B      #'L',(A4)+
000030D8  5244                    1562                  ADDI.W      #$1,D4
000030DA  4EF9 000030FA           1563                  JMP         D6_HLPR1
000030E0                          1564                  
000030E0                          1565  *****************************************************************************
000030E0                          1566  *D6_011 - MULU INSTRUCTION: INTO DATA REG************************************
000030E0                          1567  ****************|***********|***************|********************************
000030E0  18FC 004D               1568  D6_011          MOVE.B      #'M',(A4)+      Push MULU to A4 buffer
000030E4  18FC 0055               1569                  MOVE.B      #'U',(A4)+
000030E8  18FC 004C               1570                  MOVE.B      #'L',(A4)+
000030EC  18FC 0055               1571                  MOVE.B      #'U',(A4)+
000030F0  18FC 0020               1572                  MOVE.B      #' ',(A4)+
000030F4  4EF9 000030FA           1573                  JMP         D6_HLPR1
000030FA                          1574  
000030FA                          1575  *****************************************************************************
000030FA                          1576  *D6_HLPR: FILL IN SECOND PART OF INSTRUCTION*********************************
000030FA                          1577  ****************|***********|***************|********************************
000030FA  4EB9 00003C76           1578  D6_HLPR1        JSR         A4_6SPACES      Push spaces to A4 buffer
00003100  18FC 0020               1579                  MOVE.B      #' ',(A4)+
00003104  4EB9 00003798           1580                  JSR         EFFECTIVE_ADDR  Find effective address
0000310A  0C04 0000               1581                  CMPI.B      #$0,D4          Check error state
0000310E  6700 0A00               1582                  BEQ         ERROR_1
00003112  0C03 0001               1583                  CMPI.B      #$1,D3          Check valid address mode
00003116  6700 09F8               1584                  BEQ         ERROR_1         
0000311A  18FC 002C               1585                  MOVE.B      #',',(A4)+      Push data register to A4 buffer
0000311E  18FC 0044               1586                  MOVE.B      #'D',(A4)+ 
00003122  4EB9 00003778           1587                  JSR         GET_REG2        Get reg number
00003128  4EB9 0000396C           1588                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000312E  4EF8 30A0               1589                  JMP         BIT_SIX_DONE
00003132                          1590                  
00003132  4EB9 00003C76           1591  D6_HLPR2        JSR         A4_6SPACES      Push spaces to A4 buffer
00003138  18FC 0020               1592                  MOVE.B      #' ',(A4)+
0000313C  18FC 0044               1593                  MOVE.B      #'D',(A4)+ 
00003140  4EB9 00003778           1594                  JSR         GET_REG2        Get reg number
00003146  4EB9 0000396C           1595                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000314C  18FC 002C               1596                  MOVE.B      #',',(A4)+      Push data register to A4 buffer
00003150  4EB9 00003798           1597                  JSR         EFFECTIVE_ADDR  Find effective address
00003156  0C04 0000               1598                  CMPI.B      #$0,D4          Check error state
0000315A  6700 09B4               1599                  BEQ         ERROR_1
0000315E  0C03 0001               1600                  CMPI.B      #$1,D3          Check valid address mode
00003162  6700 09AC               1601                  BEQ         ERROR_1         
00003166  4EF8 30A0               1602                  JMP         BIT_SIX_DONE
0000316A                          1603                  
0000316A                          1604  *****************************************************************************
0000316A                          1605  *D6_100 - AND.B INSTRUCTION: INTO EFFECTIVE ADDRESS**************************
0000316A                          1606  ****************|***********|***************|********************************
0000316A  4EB8 30A2               1607  D6_100          JSR         FILL_AND        Push AND.B to A4 buffer
0000316E  18FC 0042               1608                  MOVE.B      #'B',(A4)+
00003172  4EF8 3132               1609                  JMP         D6_HLPR2
00003176                          1610  
00003176                          1611  *****************************************************************************
00003176                          1612  *D6_101 - AND.W INSTRUCTION: INTO EFFECTIVE ADDRESS**************************
00003176                          1613  ****************|***********|***************|********************************
00003176  4EB8 30A2               1614  D6_101          JSR         FILL_AND        Push AND.W to A4 buffer
0000317A  18FC 0057               1615                  MOVE.B      #'W',(A4)+
0000317E  4EF8 3132               1616                  JMP         D6_HLPR2
00003182                          1617                  
00003182                          1618  *****************************************************************************
00003182                          1619  *D6_110 - AND.L INSTRUCTION: INTO EFFECTIVE ADDRESS**************************
00003182                          1620  ****************|***********|***************|********************************
00003182  4EB8 30A2               1621  D6_110          JSR         FILL_AND        Push AND.L to A4 buffer
00003186  18FC 004C               1622                  MOVE.B      #'L',(A4)+
0000318A  4EF8 3132               1623                  JMP         D6_HLPR2
0000318E                          1624                  
0000318E                          1625  *****************************************************************************
0000318E                          1626  *D6_111 - MULS INSTRUCTION: INTO DATA REG************************************
0000318E                          1627  ****************|***********|***************|********************************
0000318E  18FC 004D               1628  D6_111          MOVE.B      #'M',(A4)+      Push MULS to A4 buffer
00003192  18FC 0055               1629                  MOVE.B      #'U',(A4)+
00003196  18FC 004C               1630                  MOVE.B      #'L',(A4)+
0000319A  18FC 0053               1631                  MOVE.B      #'S',(A4)+
0000319E  18FC 0020               1632                  MOVE.B      #' ',(A4)+
000031A2  4EF8 3132               1633                  JMP         D6_HLPR2
000031A6                          1634                  
000031A6                          1635  *****************************************************************************
000031A6                          1636  *BIT_SEVEN*******************************************************************
000031A6                          1637  ****************|***********|***************|********************************
000031A6  0C02 0000               1638  BIT_SEVEN       CMPI.B      #$0,D2          Check if data at D2 is 000
000031AA  6700 002C               1639                  BEQ         D7_000
000031AE  0C02 0001               1640                  CMPI.B      #$1,D2          Check if data at D2 is 001
000031B2  6700 0032               1641                  BEQ         D7_001
000031B6  0C02 0002               1642                  CMPI.B      #$2,D2          Check if data at D2 is 010
000031BA  6700 0038               1643                  BEQ         D7_010
000031BE  4EB9 00003B10           1644                  JSR         ERROR_1
000031C4  4E75                    1645  BIT_SEVEN_DONE  RTS
000031C6                          1646  
000031C6                          1647  *****************************************************************************
000031C6                          1648  *FILL_CMP********************************************************************
000031C6                          1649  ****************|***********|***************|********************************
000031C6  18FC 0043               1650  FILL_CMP        MOVE.B      #'C',(A4)+      Push CMP.B to A4 buffer
000031CA  18FC 004D               1651                  MOVE.B      #'M',(A4)+
000031CE  18FC 0050               1652                  MOVE.B      #'P',(A4)+
000031D2  18FC 002E               1653                  MOVE.B      #'.',(A4)+
000031D6  4E75                    1654                  RTS
000031D8                          1655  
000031D8                          1656  *****************************************************************************
000031D8                          1657  *D7_000 - CMP.B INSTRUCTION**************************************************
000031D8                          1658  ****************|***********|***************|********************************
000031D8  4EB8 31C6               1659  D7_000          JSR         FILL_CMP        Push CMP.B to A4 buffer
000031DC  18FC 0042               1660                  MOVE.B      #'B',(A4)+
000031E0  4EF9 00003204           1661                  JMP         D7_HLPR
000031E6                          1662                  
000031E6                          1663  *****************************************************************************
000031E6                          1664  *D7_001 - CMP.W INSTRUCTION**************************************************
000031E6                          1665  ****************|***********|***************|********************************
000031E6  4EB8 31C6               1666  D7_001          JSR         FILL_CMP        Push CMP.W to A4 buffer
000031EA  18FC 0057               1667                  MOVE.B      #'W',(A4)+
000031EE  4EF9 00003204           1668                  JMP         D7_HLPR
000031F4                          1669  
000031F4                          1670  *****************************************************************************
000031F4                          1671  *D7_010 - CMP.L INSTRUCTION**************************************************
000031F4                          1672  ****************|***********|***************|********************************
000031F4  4EB8 31C6               1673  D7_010          JSR         FILL_CMP        Push CMP.L to A4 buffer
000031F8  18FC 004C               1674                  MOVE.B      #'L',(A4)+
000031FC  5204                    1675                  ADDI.B      #$1,D4
000031FE  4EF9 00003204           1676                  JMP         D7_HLPR
00003204                          1677  
00003204                          1678  *****************************************************************************
00003204                          1679  *D7_HLPR: FILL IN SECOND PART OF INSTRUCTION*********************************
00003204                          1680  ****************|***********|***************|********************************
00003204  4EB9 00003C76           1681  D7_HLPR         JSR         A4_6SPACES      Push spaces to A4 buffer
0000320A  18FC 0020               1682                  MOVE.B      #' ',(A4)+
0000320E  4EB9 00003798           1683                  JSR         EFFECTIVE_ADDR  Find effective address
00003214  0C04 0000               1684                  CMPI.B      #$0,D4          Check error state
00003218  6700 08F6               1685                  BEQ         ERROR_1         
0000321C  0C03 0001               1686                  CMPI.B      #$1,D3          Check valid address mode
00003220  6700 08EE               1687                  BEQ         ERROR_1
00003224  18FC 002C               1688                  MOVE.B      #',',(A4)+      Push data register to A4 buffer
00003228  18FC 0044               1689                  MOVE.B      #'D',(A4)+
0000322C  4EB9 00003778           1690                  JSR         GET_REG2        Get reg number
00003232  4EB9 0000396C           1691                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00003238  4EF8 31C4               1692                  JMP         BIT_SEVEN_DONE
0000323C                          1693                  
0000323C                          1694  *****************************************************************************
0000323C                          1695  *BIT_EIGHT*******************************************************************
0000323C                          1696  ****************|***********|***************|********************************
0000323C  0C02 0000               1697  BIT_EIGHT       CMPI.B      #$0,D2          Check if data at D2 is 000
00003240  6700 0054               1698                  BEQ         D8_000
00003244  0C02 0001               1699                  CMPI.B      #$1,D2          Check if data at D2 is 001
00003248  6700 005A               1700                  BEQ         D8_001
0000324C  0C02 0002               1701                  CMPI.B      #$2,D2          Check if data at D2 is 010
00003250  6700 0060               1702                  BEQ         D8_010
00003254  0C02 0003               1703                  CMPI.B      #$3,D2          Check if data at D2 is 011
00003258  6700 0100               1704                  BEQ         D8_011
0000325C  0C02 0004               1705                  CMPI.B      #$4,D2          Check if data at D2 is 100
00003260  6700 0096               1706                  BEQ         D8_100
00003264  0C02 0005               1707                  CMPI.B      #$5,D2          Check if data at D2 is 101
00003268  6700 009C               1708                  BEQ         D8_101
0000326C  0C02 0006               1709                  CMPI.B      #$6,D2          Check if data at D2 is 110
00003270  6700 00A2               1710                  BEQ         D8_110
00003274  0C02 0007               1711                  CMPI.B      #$7,D2          Check if data at D2 is 111
00003278  6700 00FE               1712                  BEQ         D8_111
0000327C  4EB9 00003B10           1713                  JSR         ERROR_1
00003282  4E75                    1714  BIT_EIGHT_DONE  RTS
00003284                          1715  
00003284                          1716  *****************************************************************************
00003284                          1717  *FILL_ADD********************************************************************
00003284                          1718  ****************|***********|***************|********************************
00003284  18FC 0041               1719  FILL_ADD        MOVE.B      #'A',(A4)+      Push ADD. to A4 buffer
00003288  18FC 0044               1720                  MOVE.B      #'D',(A4)+
0000328C  18FC 0044               1721                  MOVE.B      #'D',(A4)+
00003290  18FC 002E               1722                  MOVE.B      #'.',(A4)+
00003294  4E75                    1723                  RTS
00003296                          1724                  
00003296                          1725  *****************************************************************************
00003296                          1726  *D8_000 - ADD.B: TO DATA REG*************************************************
00003296                          1727  ****************|***********|***************|********************************
00003296  4EB8 3284               1728  D8_000          JSR         FILL_ADD        Push ADD.B to A4 buffer
0000329A  18FC 0042               1729                  MOVE.B      #'B',(A4)+
0000329E  4EF9 000032C0           1730                  JMP         D8_HLPR1
000032A4                          1731                  
000032A4                          1732  *****************************************************************************
000032A4                          1733  *D8_001 - ADD.W: TO DATA REG*************************************************
000032A4                          1734  ****************|***********|***************|********************************
000032A4  4EB8 3284               1735  D8_001          JSR         FILL_ADD        Push ADD.W to A4 buffer
000032A8  18FC 0057               1736                  MOVE.B      #'W',(A4)+
000032AC  4EF9 000032C0           1737                  JMP         D8_HLPR1
000032B2                          1738  
000032B2                          1739  *****************************************************************************
000032B2                          1740  *D8_010 - ADD.L: TO DATA REG*************************************************
000032B2                          1741  ****************|***********|***************|********************************
000032B2  4EB8 3284               1742  D8_010          JSR         FILL_ADD        Push ADD.L to A4 buffer
000032B6  18FC 004C               1743                  MOVE.B      #'L',(A4)+
000032BA  4EF9 000032C0           1744                  JMP         D8_HLPR1
000032C0                          1745  
000032C0                          1746  *****************************************************************************
000032C0                          1747  *D8_HLPR1: FILL IN SECOND PART OF INSTRUCTION********************************
000032C0                          1748  ****************|***********|***************|********************************
000032C0  4EB9 00003C76           1749  D8_HLPR1        JSR         A4_6SPACES      Push spaces to A4 buffer
000032C6  18FC 0020               1750                  MOVE.B      #' ',(A4)+
000032CA  4EB9 00003798           1751                  JSR         EFFECTIVE_ADDR  Find effective address
000032D0  0C04 0000               1752                  CMPI.B      #$0,D4          Check error state
000032D4  6700 083A               1753                  BEQ         ERROR_1
000032D8  0C03 0001               1754                  CMPI.B      #$1,D3          Check valid address mode
000032DC  6700 0832               1755                  BEQ ERROR_1 
000032E0  18FC 002C               1756                  MOVE.B      #',',(A4)+      Push data reg to A4 buffer
000032E4  18FC 0044               1757                  MOVE.B      #'D',(A4)+
000032E8  4EB9 00003778           1758                  JSR         GET_REG2        Get reg number
000032EE  4EB9 0000396C           1759                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
000032F4  4EF8 3282               1760                  JMP         BIT_EIGHT_DONE
000032F8                          1761  
000032F8                          1762  *****************************************************************************
000032F8                          1763  *D8_100 - ADD.B: TO EFFECTIVE ADDRESS****************************************
000032F8                          1764  ****************|***********|***************|********************************
000032F8  4EB8 3284               1765  D8_100          JSR         FILL_ADD        Push ADD.B to A4 buffer
000032FC  18FC 0042               1766                  MOVE.B      #'B',(A4)+
00003300  4EF9 00003322           1767                  JMP         D8_HLPR2
00003306                          1768                  
00003306                          1769  *****************************************************************************
00003306                          1770  *D8_101 - ADD.B: TO EFFECTIVE ADDRESS****************************************
00003306                          1771  ****************|***********|***************|********************************
00003306  4EB8 3284               1772  D8_101          JSR         FILL_ADD        Push ADD.W to A4 buffer
0000330A  18FC 0057               1773                  MOVE.B      #'W',(A4)+
0000330E  4EF9 00003322           1774                  JMP         D8_HLPR2
00003314                          1775                  
00003314                          1776  *****************************************************************************
00003314                          1777  *D8_110 - ADD.B: TO EFFECTIVE ADDRESS****************************************
00003314                          1778  ****************|***********|***************|********************************
00003314  4EB8 3284               1779  D8_110          JSR         FILL_ADD        Push ADD.L to A4 buffer
00003318  18FC 004C               1780                  MOVE.B      #'L',(A4)+
0000331C  4EF9 00003322           1781                  JMP         D8_HLPR2
00003322                          1782  
00003322                          1783  *****************************************************************************
00003322                          1784  *D8_HLPR2: FILL IN SECOND PART OF INSTRUCTION********************************
00003322                          1785  ****************|***********|***************|********************************
00003322  4EB9 00003C76           1786  D8_HLPR2        JSR         A4_6SPACES      Push spaces to A4 buffer
00003328  18FC 0020               1787                  MOVE.B      #' ',(A4)+
0000332C  18FC 0044               1788                  MOVE.B      #'D',(A4)+
00003330  4EB9 00003778           1789                  JSR         GET_REG2        Get reg number
00003336  4EB9 0000396C           1790                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000333C  18FC 002C               1791                  MOVE.B      #',',(A4)+
00003340  4EB9 00003798           1792                  JSR         EFFECTIVE_ADDR  Find effective address
00003346  0C04 0000               1793                  CMPI.B      #$0,D4          Check error state
0000334A  6700 07C4               1794                  BEQ         ERROR_1
0000334E  0C03 0001               1795                  CMPI.B      #$1,D3          Check valid address mode
00003352  6700 07BC               1796                  BEQ         ERROR_1
00003356  4EF8 3282               1797                  JMP         BIT_EIGHT_DONE
0000335A                          1798                  
0000335A                          1799  *****************************************************************************
0000335A                          1800  *D8_011 - ADDA.W*************************************************************
0000335A                          1801  ****************|***********|***************|********************************
0000335A  18FC 0041               1802  D8_011          MOVE.B      #'A',(A4)+      Push ADDA.W to A4 buffer
0000335E  18FC 0044               1803                  MOVE.B      #'D',(A4)+
00003362  18FC 0044               1804                  MOVE.B      #'D',(A4)+
00003366  18FC 0041               1805                  MOVE.B      #'A',(A4)+
0000336A  18FC 002E               1806                  MOVE.B      #'.',(A4)+
0000336E  18FC 0057               1807                  MOVE.B      #'W',(A4)+
00003372  4EF9 00003398           1808                  JMP         D8_HLPR3
00003378                          1809  
00003378                          1810  *****************************************************************************
00003378                          1811  *D8_111 - ADDA.W*************************************************************
00003378                          1812  ****************|***********|***************|********************************
00003378  18FC 0041               1813  D8_111          MOVE.B      #'A',(A4)+      Push ADDA.L to A4 buffer
0000337C  18FC 0044               1814                  MOVE.B      #'D',(A4)+
00003380  18FC 0044               1815                  MOVE.B      #'D',(A4)+
00003384  18FC 0041               1816                  MOVE.B      #'A',(A4)+
00003388  18FC 002E               1817                  MOVE.B      #'.',(A4)+
0000338C  18FC 004C               1818                  MOVE.B      #'L',(A4)+
00003390  5204                    1819                  ADDI.B      #$1,D4
00003392  4EF9 00003398           1820                  JMP         D8_HLPR3
00003398                          1821                  
00003398                          1822  *****************************************************************************
00003398                          1823  *D8_HLPR3: FILL IN SECOND PART OF INSTRUCTION********************************
00003398                          1824  ****************|***********|***************|********************************
00003398  4EB9 00003C76           1825  D8_HLPR3        JSR         A4_6SPACES      Push spaces to A4 buffer
0000339E  4EB9 00003798           1826                  JSR         EFFECTIVE_ADDR  Find effective address
000033A4  0C04 0000               1827                  CMPI.B      #$0,D4          Check error state
000033A8  6700 0766               1828                  BEQ         ERROR_1         
000033AC  18FC 002C               1829                  MOVE.B      #',',(A4)+      Move address reg to A4 buffer
000033B0  18FC 0041               1830                  MOVE.B      #'A',(A4)+
000033B4  4EB9 00003778           1831                  JSR         GET_REG2        Get reg number
000033BA  4EB9 0000396C           1832                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
000033C0  4EF8 3282               1833                  JMP         BIT_EIGHT_DONE
000033C4                          1834                  
000033C4                          1835  *****************************************************************************
000033C4                          1836  *BIT_NINE********************************************************************
000033C4                          1837  ****************|***********|***************|********************************
000033C4  0C02 0000               1838  BIT_NINE        CMPI.B      #$0,D2          Check if data at D2 is 000
000033C8  6700 0044               1839                  BEQ         D9_000
000033CC  0C02 0001               1840                  CMPI.B      #$1,D2          Check if data at D2 is 001
000033D0  6700 004A               1841                  BEQ         D9_001
000033D4  0C02 0002               1842                  CMPI.B      #$2,D2          Check if data at D2 is 010
000033D8  6700 0050               1843                  BEQ         D9_010
000033DC  0C02 0004               1844                  CMPI.B      #$4,D2          Check if data at D2 is 100
000033E0  6700 008E               1845                  BEQ         D9_100
000033E4  0C02 0005               1846                  CMPI.B      #$5,D2          Check if data at D2 is 101
000033E8  6700 0094               1847                  BEQ         D9_101
000033EC  0C02 0006               1848                  CMPI.B      #$6,D2          Check if data at D2 is 110
000033F0  6700 009A               1849                  BEQ         D9_110
000033F4  4EB9 00003B10           1850                  JSR         ERROR_1
000033FA  4E75                    1851  BIT_NINE_DONE   RTS
000033FC                          1852  
000033FC                          1853  *****************************************************************************
000033FC                          1854  *FILL_SUB********************************************************************
000033FC                          1855  ****************|***********|***************|********************************
000033FC  18FC 0053               1856  FILL_SUB        MOVE.B      #'S',(A4)+      Push SUB. to A4 buffer
00003400  18FC 0055               1857                  MOVE.B      #'U',(A4)+
00003404  18FC 0042               1858                  MOVE.B      #'B',(A4)+
00003408  18FC 002E               1859                  MOVE.B      #'.',(A4)+
0000340C  4E75                    1860                  RTS
0000340E                          1861                  
0000340E                          1862  *****************************************************************************
0000340E                          1863  *D9_000 - SUB.B INSTRUCTION: TO DATA REG*************************************
0000340E                          1864  ****************|***********|***************|********************************
0000340E  4EB8 33FC               1865  D9_000          JSR         FILL_SUB        Push SUB.B to A4 buffer
00003412  18FC 0042               1866                  MOVE.B      #'B',(A4)+
00003416  4EF9 00003438           1867                  JMP         D9_HLPR1                
0000341C                          1868                  
0000341C                          1869  *****************************************************************************
0000341C                          1870  *D9_001 - SUB.W INSTRUCTION: TO DATA REG*************************************
0000341C                          1871  ****************|***********|***************|********************************
0000341C  4EB8 33FC               1872  D9_001          JSR         FILL_SUB        Push SUB.W to A4 buffer
00003420  18FC 0057               1873                  MOVE.B      #'W',(A4)+
00003424  4EF9 00003438           1874                  JMP         D9_HLPR1  
0000342A                          1875  
0000342A                          1876  *****************************************************************************
0000342A                          1877  *D9_010 - SUB.L INSTRUCTION: TO DATA REG*************************************
0000342A                          1878  ****************|***********|***************|********************************
0000342A  4EB8 33FC               1879  D9_010          JSR         FILL_SUB        Push SUB.L to A4 buffer
0000342E  18FC 004C               1880                  MOVE.B      #'L',(A4)+
00003432  4EF9 00003438           1881                  JMP         D9_HLPR1  
00003438                          1882  
00003438                          1883  *****************************************************************************
00003438                          1884  *D9_HLPR1: FILL IN SECOND PART OF INSTRUCTION********************************
00003438                          1885  ****************|***********|***************|********************************
00003438  4EB9 00003C76           1886  D9_HLPR1        JSR         A4_6SPACES      Push spaces to A4 buffer
0000343E  18FC 0020               1887                  MOVE.B      #' ',(A4)+
00003442  4EB9 00003798           1888                  JSR         EFFECTIVE_ADDR  Find effective address
00003448  0C04 0000               1889                  CMPI.B      #$0,D4          Check error state
0000344C  6700 06C2               1890                  BEQ         ERROR_1
00003450  0C03 0001               1891                  CMPI.B      #$1,D3          Check valid address mode
00003454  6700 06BA               1892                  BEQ         ERROR_1         
00003458  18FC 002C               1893                  MOVE.B      #',',(A4)+      Push data reg to A4 buffer
0000345C  18FC 0044               1894                  MOVE.B      #'D',(A4)+
00003460  4EB9 00003778           1895                  JSR         GET_REG2        Get reg number
00003466  4EB9 0000396C           1896                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000346C  4EF8 33FA               1897                  JMP         BIT_NINE_DONE
00003470                          1898                  
00003470                          1899  *****************************************************************************
00003470                          1900  *D9_100 - SUB.B INSTRUCTION: TO EFFECTIVE ADDRESS****************************
00003470                          1901  ****************|***********|***************|********************************
00003470  4EB8 33FC               1902  D9_100          JSR         FILL_SUB        Push SUB.B to A4 buffer
00003474  18FC 0042               1903                  MOVE.B      #'B',(A4)+
00003478  4EF9 0000349A           1904                  JMP         D9_HLPR2 
0000347E                          1905                  
0000347E                          1906  *****************************************************************************
0000347E                          1907  *D9_101 - SUB.W INSTRUCTION: TO EFFECTIVE ADDRESS****************************
0000347E                          1908  ****************|***********|***************|********************************
0000347E  4EB8 33FC               1909  D9_101          JSR         FILL_SUB        Push SUB.W to A4 buffer
00003482  18FC 0057               1910                  MOVE.B      #'W',(A4)+
00003486  4EF9 0000349A           1911                  JMP         D9_HLPR2 
0000348C                          1912                  
0000348C                          1913  *****************************************************************************
0000348C                          1914  *D9_110 - SUB.L INSTRUCTION: TO EFFECTIVE ADDRESS****************************
0000348C                          1915  ****************|***********|***************|********************************
0000348C  4EB8 33FC               1916  D9_110          JSR         FILL_SUB        Push SUB.L to A4 buffer
00003490  18FC 004C               1917                  MOVE.B      #'L',(A4)+
00003494  4EF9 0000349A           1918                  JMP         D9_HLPR2 
0000349A                          1919  
0000349A                          1920  *****************************************************************************
0000349A                          1921  *D9_HLPR2: FILL IN SECOND PART OF INSTRUCTION********************************
0000349A                          1922  ****************|***********|***************|********************************
0000349A  4EB9 00003C76           1923  D9_HLPR2        JSR         A4_6SPACES      Push spaces to A4 buffer
000034A0  18FC 0020               1924                  MOVE.B      #' ',(A4)+
000034A4  18FC 0044               1925                  MOVE.B      #'D',(A4)+
000034A8  4EB9 00003778           1926                  JSR         GET_REG2        Get reg number
000034AE  4EB9 0000396C           1927                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
000034B4  18FC 002C               1928                  MOVE.B      #',',(A4)+
000034B8  4EB9 00003798           1929                  JSR         EFFECTIVE_ADDR  Find effective address
000034BE  0C04 0000               1930                  CMPI.B      #$0,D4          Check error state
000034C2  6700 064C               1931                  BEQ         ERROR_1
000034C6  0C03 0001               1932                  CMPI.B      #$1,D3          Check valid address mode
000034CA  6700 0644               1933                  BEQ         ERROR_1
000034CE  4EF8 33FA               1934                  JMP         BIT_NINE_DONE
000034D2                          1935                  
000034D2                          1936  *****************************************************************************
000034D2                          1937  *BRA_ADDR********************************************************************
000034D2                          1938  ****************|***********|***************|********************************
000034D2  4EB9 00003C76           1939  BRA_ADDR        JSR         A4_6SPACES      Push branch address
000034D8  18FC 0020               1940                  MOVE.B      #' ',(A4)+ 
000034DC  18FC 0020               1941                  MOVE.B      #' ',(A4)+ 
000034E0  18FC 0020               1942                  MOVE.B      #' ',(A4)+
000034E4  18FC 0024               1943                  MOVE.B      #'$',(A4)+
000034E8  BE3C 0000               1944                  CMP.B       #$0,D7          Check 16 bit offset
000034EC  6700 000E               1945                  BEQ         B_16
000034F0  BE3C 00FF               1946                  CMP.B       #$FF,D7         Check 32 bit offset
000034F4  6700 001C               1947                  BEQ         B_32
000034F8  6000 002E               1948                  BRA         GET_OFFSET      Get 8 bit offset data
000034FC  0C86 00000000           1949  B_16            CMPI.L      #$0,D6          Check for word data
00003502  6F00 060C               1950                  BLE         ERROR_1
00003506  4EB9 000036A8           1951                  JSR         PUSH_W          Convert to ASCII and push to A4
0000350C  548D                    1952                  ADD.L       #$2,A5          Increment A5 to next instruction
0000350E  5386                    1953                  SUBI.L      #$1,D6          Decrement data remaining
00003510  4E75                    1954                  RTS
00003512  0C86 00000001           1955  B_32            CMPI.L      #$1,D6          Check for longword data
00003518  6F00 05F6               1956                  BLE         ERROR_1
0000351C  4EB9 000036E0           1957                  JSR         PUSH_L          Convert to ASCII and push to A4
00003522  588D                    1958                  ADD.L       #$4,A5          Increment A5 to next instruction
00003524  5586                    1959                  SUBI.L      #$2,D6          Decrement data remaining
00003526  4E75                    1960                  RTS
00003528                          1961  
00003528                          1962  *****************************************************************************
00003528                          1963  *GET_OFFSET******************************************************************
00003528                          1964  ****************|***********|***************|********************************
00003528  4245                    1965  GET_OFFSET      CLR         D5              Empty D5 register
0000352A  3A07                    1966                  MOVE.W      D7,D5           Move instruction at D7 to D5
0000352C  0245 00FF               1967                  ANDI        #$00FF,D5       Chop off two  word data bits
00003530  E84D                    1968                  LSR.W       #$4,D5          Get 4 bits of offset
00003532  4EB9 00003B46           1969                  JSR         CVT_ASCII2      Convert to ASCII and push
00003538  3A07                    1970                  MOVE.W      D7,D5           Move instruction at D7 to D5
0000353A  0245 000F               1971                  ANDI        #$000F,D5       Chop off threeword data bits
0000353E  4EB9 00003B46           1972                  JSR         CVT_ASCII2      Convert to ASCII and push
00003544  4E75                    1973                  RTS         
00003546                          1974  
00003546                          1975  *****************************************************************************
00003546                          1976  *LEA INSTRUCTION*************************************************************
00003546                          1977  ****************|***********|***************|********************************
00003546  18FC 004C               1978  LEA_INS         MOVE.B      #'L',(A4)+      Push LEA to A4 buffer
0000354A  18FC 0045               1979                  MOVE.B      #'E',(A4)+
0000354E  18FC 0041               1980                  MOVE.B      #'A',(A4)+
00003552  4EB9 00003C76           1981                  JSR         A4_6SPACES
00003558  18FC 0020               1982                  MOVE.B      #' ',(A4)+
0000355C  18FC 0020               1983                  MOVE.B      #' ',(A4)+
00003560  18FC 0020               1984                  MOVE.B      #' ',(A4)+
00003564  4EB9 00003798           1985                  JSR         EFFECTIVE_ADDR  Find effective address
0000356A  BA3C 0001               1986                  CMP.B       #$1,D5          Check addressing mode
0000356E  6F00 0028               1987                  BLE         LEA_ERROR
00003572  BA3C 0003               1988                  CMP.B       #$3,D5          
00003576  6700 0020               1989                  BEQ         LEA_ERROR
0000357A  BA3C 0004               1990                  CMP.B       #$4,D5 
0000357E  6700 0018               1991                  BEQ         LEA_ERROR
00003582  18FC 002C               1992                  MOVE.B      #',',(A4)+      Push ,A to A4 buffer
00003586  18FC 0041               1993                  MOVE.B      #'A',(A4)+
0000358A  4EB9 00003778           1994                  JSR         GET_REG2        Get registry code
00003590  4EB9 0000396C           1995                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00003596  4E75                    1996                  RTS
00003598  4EB9 00003B10           1997  LEA_ERROR       JSR         ERROR_1
0000359E  4E75                    1998                  RTS
000035A0                          1999  
000035A0                          2000  *****************************************************************************
000035A0                          2001  *IMM_DATA********************************************************************
000035A0                          2002  ****************|***********|***************|********************************
000035A0  0C86 00000000           2003  IMM_DATA        CMPI.L      #$0,D6          Check if there is data remaining
000035A6  6700 0020               2004                  BEQ         IMM_ERROR       
000035AA  4EB9 0000366C           2005                  JSR         DATA_SIZE       Get size of data
000035B0  B47C 0000               2006                  CMP.W       #$0,D2          Check if byte data
000035B4  6700 0048               2007                  BEQ         IMM_B
000035B8  B47C 0001               2008                  CMP.W       #$1,D2          Check if word data
000035BC  6700 004E               2009                  BEQ         IMM_W
000035C0  B47C 0002               2010                  CMP.W       #$2,D2          Check if longword data          
000035C4  6700 0054               2011                  BEQ         IMM_L
000035C8  6000 0546               2012  IMM_ERROR       BRA         ERROR_1
000035CC  4E75                    2013                  RTS
000035CE  4EB9 000036A8           2014  IMM_PUSH        JSR         PUSH_W          Convert to ASCII and push
000035D4  544D                    2015                  ADDQ        #$2,A5          Increment address at A5
000035D6  5346                    2016                  SUBQ        #$1,D6          Decrement remaining data
000035D8  18FC 002C               2017                  MOVE.B      #',',(A4)+      Push , to A4 buffer
000035DC  4EB9 00003798           2018                  JSR         EFFECTIVE_ADDR  Find effective address
000035E2  0C84 00000000           2019                  CMPI.L      #$0,D4          Error checking
000035E8  6700 000C               2020                  BEQ         IMM_BACK
000035EC  0C03 0001               2021                  CMPI.B      #$1,D3          Check for valid address mode
000035F0  6700 0004               2022                  BEQ         IMM_BACK
000035F4  4E75                    2023                  RTS
000035F6  5246                    2024  IMM_BACK        ADDQ        #$1,D6          Reset registers
000035F8  554D                    2025                  SUBQ        #$2,A5
000035FA  4EF8 35C8               2026                  JMP         IMM_ERROR
000035FE  18FC 0042               2027  IMM_B           MOVE.B      #'B',(A4)+      Push byte immediate data
00003602  4EB9 0000365C           2028                  JSR         IMM_SPACES
00003608  4EF8 35CE               2029                  JMP         IMM_PUSH        
0000360C  18FC 0057               2030  IMM_W           MOVE.B      #'W',(A4)+      Push word immediate data
00003610  4EB9 0000365C           2031                  JSR         IMM_SPACES
00003616  4EF8 35CE               2032                  JMP         IMM_PUSH
0000361A  0C86 00000001           2033  IMM_L           CMPI.L      #$1,D6          Check sufficient data
00003620  6FA6                    2034                  BLE         IMM_ERROR
00003622  18FC 004C               2035                  MOVE.B      #'L',(A4)+      Push longword immediate data
00003626  4EB9 0000365C           2036                  JSR         IMM_SPACES
0000362C  4EB9 000036E0           2037                  JSR         PUSH_L          Convert to ASCII and push to A4
00003632  584D                    2038                  ADDQ        #$4,A5          Increment address at A5
00003634  5546                    2039                  SUBQ        #$2,D6          Decrement remaining data
00003636  18FC 002C               2040                  MOVE.B      #',',(A4)+      Push , to A4 buffer
0000363A  4EB9 00003798           2041                  JSR         EFFECTIVE_ADDR  Find effective address
00003640  0C84 00000000           2042                  CMPI.L      #$0,D4          Error checking
00003646  6700 000C               2043                  BEQ         IMM_BACK2
0000364A  0C03 0001               2044                  CMPI.B      #$1,D3          Check for valid address mode
0000364E  6700 0004               2045                  BEQ         IMM_BACK2
00003652  4E75                    2046                  RTS
00003654  5446                    2047  IMM_BACK2       ADDQ        #$2,D6          Reset registers
00003656  594D                    2048                  SUBQ        #$4,A5
00003658  4EF8 35C8               2049                  JMP         IMM_ERROR
0000365C  4EB9 00003C76           2050  IMM_SPACES      JSR         A4_6SPACES      Push spaces to A4 buffer
00003662  18FC 0023               2051                  MOVE.B #'#',(A4)+ 
00003666  18FC 0024               2052                  MOVE.B #'$',(A4)+ 
0000366A  4E75                    2053                  RTS
0000366C                          2054  
0000366C                          2055  *****************************************************************************
0000366C                          2056  *DATA_SIZE - VALUE IN D2*****************************************************
0000366C                          2057  ****************|***********|***************|********************************
0000366C  3407                    2058  DATA_SIZE       MOVE.W      D7,D2           Move opcode from D7 to D2
0000366E  EC4A                    2059                  LSR.W       #$6,D2          Move 7th bit into position
00003670  0242 0003               2060                  ANDI        #$0003,D2       Isolate size bits
00003674  4E75                    2061                  RTS
00003676                          2062  
00003676                          2063  *****************************************************************************
00003676                          2064  *PUSH_LW*********************************************************************
00003676                          2065  ****************|***********|***************|********************************
00003676  5304                    2066  PUSH_LW         SUBI.B      #$1,D4        
00003678  4EB9 000036A8           2067                  JSR         PUSH_W
0000367E  4EF9 00003AC0           2068                  JMP         ABS_100_CONT
00003684                          2069                  
00003684                          2070  *****************************************************************************
00003684                          2071  *PUSH_B**********************************************************************
00003684                          2072  ****************|***********|***************|********************************
00003684  4245                    2073  PUSH_B          CLR         D5              Empty D5 registry
00003686  3A15                    2074                  MOVE.W      (A5),D5         Move word data from A5 to D5
00003688  0245 00FF               2075                  ANDI        #$00FF,D5       Chop off leading two characters
0000368C  E84D                    2076                  LSR.W       #$4,D5          Shift next character
0000368E  4EB9 00003B46           2077                  JSR         CVT_ASCII2      Convert character to ASCII
00003694  3A15                    2078                  MOVE.W      (A5),D5         Move word data from A5 to D5
00003696  0245 000F               2079                  ANDI        #$000F,D5       Chop off leading characters
0000369A  4EB9 00003B46           2080                  JSR         CVT_ASCII2      Convert character to ASCII
000036A0  7002                    2081                  MOVEQ       #$2,D0
000036A2  4EF9 00003AC0           2082                  JMP         ABS_100_CONT
000036A8                          2083  
000036A8                          2084  *****************************************************************************
000036A8                          2085  *PUSH_W**********************************************************************
000036A8                          2086  ****************|***********|***************|********************************
000036A8  4245                    2087  PUSH_W          CLR         D5              Empty D5 registry
000036AA  3A15                    2088                  MOVE.W      (A5),D5         Move word data from A5 to D5
000036AC  E04D                    2089                  LSR.W       #$8,D5          Shift leading character
000036AE  E84D                    2090                  LSR.W       #$4,D5
000036B0  4EB9 00003B46           2091                  JSR         CVT_ASCII2      Convert character to ASCII
000036B6  3A15                    2092                  MOVE.W      (A5),D5         Move word data from A5 to D5
000036B8  0245 0FFF               2093                  ANDI        #$0FFF,D5       Chop off leading character
000036BC  E04D                    2094                  LSR.W       #$8,D5          Shift next character
000036BE  4EB9 00003B46           2095                  JSR         CVT_ASCII2      Convert character to ASCII
000036C4  3A15                    2096                  MOVE.W      (A5),D5         Move word data from A5 to D5
000036C6  0245 00FF               2097                  ANDI        #$00FF,D5       Chop off leading two characters
000036CA  E84D                    2098                  LSR.W       #$4,D5          Shift next character
000036CC  4EB9 00003B46           2099                  JSR         CVT_ASCII2      Convert character to ASCII
000036D2  3A15                    2100                  MOVE.W      (A5),D5         Move word data from A5 to D5
000036D4  0245 000F               2101                  ANDI        #$000F,D5       Chop off leading three characters
000036D8  4EB9 00003B46           2102                  JSR         CVT_ASCII2      Convert character to ASCII 
000036DE  4E75                    2103                  RTS
000036E0                          2104  
000036E0                          2105  *****************************************************************************
000036E0                          2106  *PUSH_L**********************************************************************
000036E0                          2107  ****************|***********|***************|********************************
000036E0  4245                    2108  PUSH_L          CLR         D5              Empty D5 registry
000036E2  2A15                    2109                  MOVE.L      (A5),D5         Move longword data from A5 to D5
000036E4  E08D                    2110                  LSR.L       #$8,D5          Shift leading character
000036E6  E08D                    2111                  LSR.L       #$8,D5           
000036E8  E08D                    2112                  LSR.L       #$8,D5
000036EA  E88D                    2113                  LSR.L       #$4,D5
000036EC  4EB9 00003B46           2114                  JSR         CVT_ASCII2      Convert character to ASCII
000036F2  2A15                    2115                  MOVE.L      (A5),D5         Move longword data from A5 to D5
000036F4  0285 0FFFFFFF           2116                  ANDI.L      #$0FFFFFFF,D5   Chop off leading character
000036FA  E08D                    2117                  LSR.L       #$8,D5          Shift next character
000036FC  E08D                    2118                  LSR.L       #$8,D5
000036FE  E08D                    2119                  LSR.L       #$8,D5
00003700  4EB9 00003B46           2120                  JSR         CVT_ASCII2      Convert character to ASCII
00003706  2A15                    2121                  MOVE.L      (A5),D5         Move longword data from A5 to D5
00003708  0285 00FFFFFF           2122                  ANDI.L      #$00FFFFFF,D5   Chop off leading two characters
0000370E  E08D                    2123                  LSR.L       #$8,D5          Shift next character
00003710  E08D                    2124                  LSR.L       #$8,D5 
00003712  E88D                    2125                  LSR.L       #$4,D5
00003714  4EB9 00003B46           2126                  JSR         CVT_ASCII2      Convert character to ASCII
0000371A  2A15                    2127                  MOVE.L      (A5),D5         Move longword data from A5 to D5
0000371C  0285 000FFFFF           2128                  ANDI.L      #$000FFFFF,D5   Chop off leading three characters
00003722  E08D                    2129                  LSR.L       #$8,D5          Shift next character
00003724  E08D                    2130                  LSR.L       #$8,D5          
00003726  4EB9 00003B46           2131                  JSR         CVT_ASCII2      Convert character to ASCII
0000372C  2A15                    2132                  MOVE.L      (A5),D5         Move longword data from A5 to D5
0000372E  0285 0000FFFF           2133                  ANDI.L      #$0000FFFF,D5   Chop off leading four characters
00003734  E08D                    2134                  LSR.L       #$8,D5          Shift next character
00003736  E88D                    2135                  LSR.L       #$4,D5
00003738  4EB9 00003B46           2136                  JSR         CVT_ASCII2      Convert character to ASCII
0000373E  2A15                    2137                  MOVE.L      (A5),D5         Move longword data from A5 to D5
00003740  0285 00000FFF           2138                  ANDI.L      #$00000FFF,D5   Chop off leading 5 characters
00003746  E08D                    2139                  LSR.L       #$8,D5          Shift next character
00003748  4EB9 00003B46           2140                  JSR         CVT_ASCII2      Convert character to ASCII
0000374E  2A15                    2141                  MOVE.L      (A5),D5         Move longword data from A5 to D5
00003750  0285 000000FF           2142                  ANDI.L      #$000000FF,D5   Chop off leading six characters
00003756  E88D                    2143                  LSR.L       #$4,D5          Shift next character
00003758  4EB9 00003B46           2144                  JSR         CVT_ASCII2      Convert character to ASCII
0000375E  2A15                    2145                  MOVE.L      (A5),D5         Move longword data from A5 to D5
00003760  0285 0000000F           2146                  ANDI.L      #$0000000F,D5   Chop off leading seven characters
00003766  4EB9 00003B46           2147                  JSR         CVT_ASCII2      Convert character to ASCII
0000376C  4E75                    2148                  RTS
0000376E                          2149  
0000376E                          2150  *****************************************************************************
0000376E                          2151  *GET_REG - VALUE IN D2*******************************************************
0000376E                          2152  ****************|***********|***************|********************************
0000376E  3407                    2153  GET_REG         MOVE.W      D7,D2           Move the registry OPCODE into D2
00003770  EC4A                    2154                  LSR.W       #$6,D2          Move input registry bits
00003772  0242 0007               2155                  ANDI        #$0007,D2       Chop off unneeded data
00003776  4E75                    2156                  RTS         
00003778                          2157  
00003778                          2158  *****************************************************************************
00003778                          2159  *GET SECOND REGISTER - VALUE IN D2*******************************************
00003778                          2160  ****************|***********|***************|********************************
00003778  3407                    2161  GET_REG2        MOVE.W      D7,D2           Move the registry OPCODE into D2
0000377A  E04A                    2162                  LSR.W       #$8,D2          Move output registry bits
0000377C  E24A                    2163                  LSR.W       #$1,D2           
0000377E  0242 0007               2164                  ANDI.W      #$0007,D2       Chop off unneeded data
00003782  4E75                    2165                  RTS
00003784                          2166  
00003784                          2167  *****************************************************************************
00003784                          2168  *BIT_RANGE_8 - VALUE IN D2***************************************************
00003784                          2169  ****************|***********|***************|********************************
00003784  3407                    2170  BIT_RANGE_8     MOVE.W      D7,D2           Move current OPCODE to D2
00003786  E04A                    2171                  LSR.W       #$8,D2          Move bit 8 into correct position
00003788  0242 0001               2172                  ANDI        #$0001,D2       Chop off unneeded data
0000378C  4E75                    2173                  RTS
0000378E                          2174  
0000378E                          2175  *****************************************************************************
0000378E                          2176  *BIT_RANGE_3TO4 - VALUE IN D2************************************************
0000378E                          2177  ****************|***********|***************|********************************
0000378E  3407                    2178  BIT_RANGE_3TO4  MOVE.W      D7,D2           Move current OPCODE to D2
00003790  E64A                    2179                  LSR.W       #$3,D2          Move bits 3-4
00003792  0242 0003               2180                  ANDI        #$0003,D2       Chop off unneeded data
00003796  4E75                    2181                  RTS
00003798                          2182  
00003798                          2183  *****************************************************************************
00003798                          2184  *EFFECTIVE_ADDR - D3: MODE; D6: REMAINING DATA; D7: OPCODE; A5 EA BUFFER*****
00003798                          2185  ****************|***********|***************|********************************
00003798  1A07                    2186  EFFECTIVE_ADDR  MOVE.B      D7,D5           Move current OPCODE to D5
0000379A  E50D                    2187                  LSL.B       #$2,D5          Chop off first two binary bits
0000379C  EA0D                    2188                  LSR.B       #$5,D5          Move the three addressing bits
0000379E  1407                    2189                  MOVE.B      D7,D2           Move current OPCODE to D2
000037A0  EB0A                    2190                  LSL.B       #$5,D2          Chop off first five bits
000037A2  EA0A                    2191                  LSR.B       #$5,D2           
000037A4  B63C 0001               2192                  CMP.B       #$1,D3          Check if move operation
000037A8  6700 01A4               2193                  BEQ         EFF_ADDR_MOVE   
000037AC  B63C 0000               2194                  CMP.B       #$0,D3          Check effective addressing
000037B0  6700 0004               2195                  BEQ         EFFECTIVE_HLPR  Find mode
000037B4  4E75                    2196                  RTS
000037B6                          2197                  
000037B6                          2198  *****************************************************************************
000037B6                          2199  *EFFECTIVE_HLPR - HELPER FUNCTION********************************************
000037B6                          2200  ****************|***********|***************|********************************
000037B6  4EB9 000037BE           2201  EFFECTIVE_HLPR  JSR         GET_EA_MODE     Get the effective addressing mode
000037BC  4E75                    2202                  RTS
000037BE                          2203  
000037BE                          2204  *****************************************************************************
000037BE                          2205  *GET_EA_MODE*****************************************************************
000037BE                          2206  ****************|***********|***************|********************************
000037BE  0C05 0000               2207  GET_EA_MODE     CMPI.B      #$0,D5
000037C2  6700 0042               2208                  BEQ         GET_EA_000      mode is Dn
000037C6  0C05 0001               2209                  CMPI.B      #$1,D5
000037CA  6700 0048               2210                  BEQ         GET_EA_001      mode is An
000037CE  0C05 0002               2211                  CMPI.B      #$2,D5
000037D2  6700 004E               2212                  BEQ         GET_EA_010      mode is (An)
000037D6  0C05 0003               2213                  CMPI.B      #$3,D5
000037DA  6700 005C               2214                  BEQ         GET_EA_011      mode is (An)+
000037DE  0C05 0004               2215                  CMPI.B      #$4,D5
000037E2  6700 006E               2216                  BEQ         GET_EA_100      mode is -(An)
000037E6  0C05 0005               2217                  CMPI.B      #$5,D5
000037EA  6700 0080               2218                  BEQ         GET_EA_101      mode is (d16,An)
000037EE  0C05 0006               2219                  CMPI.B      #$6,D5
000037F2  6700 00E6               2220                  BEQ         GET_EA_110      mode is (d8,An,Xn)
000037F6  0C05 0007               2221                  CMPI.B      #$7,D5
000037FA  6700 0148               2222                  BEQ         GET_EA_111      mode is (XXX).W or (XXX).L
000037FE  4EF9 00003B10           2223                  JMP         ERROR_1
00003804  4E75                    2224  GET_EA_DONE     RTS
00003806                          2225  
00003806                          2226  *****************************************************************************
00003806                          2227  *GET_EA_000 - DATA REGISTER**************************************************
00003806                          2228  ****************|***********|***************|********************************
00003806  18FC 0044               2229  GET_EA_000      MOVE.B      #'D',(A4)+      Push D to A4 buffer
0000380A  4EB9 0000396C           2230                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00003810  4EF8 3804               2231                  JMP         GET_EA_DONE
00003814                          2232                  
00003814                          2233  *****************************************************************************
00003814                          2234  *GET_EA_001 - ADDRESS REGISTER***********************************************
00003814                          2235  ****************|***********|***************|********************************
00003814  18FC 0041               2236  GET_EA_001      MOVE.B      #'A',(A4)+      Push A to A4 buffer
00003818  4EB9 0000396C           2237                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000381E  4EF8 3804               2238                  JMP         GET_EA_DONE
00003822                          2239                  
00003822                          2240  *****************************************************************************
00003822                          2241  *GET_EA_010 - EFFECTIVE ADDRESS**********************************************
00003822                          2242  ****************|***********|***************|********************************
00003822  18FC 0028               2243  GET_EA_010      MOVE.B      #'(',(A4)+      Push (A#) to A4 buffer
00003826  18FC 0041               2244                  MOVE.B      #'A',(A4)+      
0000382A  4EB9 0000396C           2245                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
00003830  18FC 0029               2246                  MOVE.B      #')',(A4)+      
00003834  4EF8 3804               2247                  JMP         GET_EA_DONE
00003838                          2248  
00003838                          2249  *****************************************************************************
00003838                          2250  *GET_EA_011 - EFFECTIVE ADDRESS POST INCREMENT*******************************
00003838                          2251  ****************|***********|***************|********************************
00003838  18FC 0028               2252  GET_EA_011      MOVE.B      #'(',(A4)+      Push (A#)+ to A4 buffer
0000383C  18FC 0041               2253                  MOVE.B      #'A',(A4)+      
00003840  4EB9 0000396C           2254                  JSR         PUSH_REG_NUM    Push registry number
00003846  18FC 0029               2255                  MOVE.B      #')',(A4)+      
0000384A  18FC 002B               2256                  MOVE.B      #'+',(A4)+ 
0000384E  4EF8 3804               2257                  JMP         GET_EA_DONE
00003852                          2258  *****************************************************************************
00003852                          2259  *GET_EA_100 - EFFECTIVE ADDRESS PRE DECREMENT********************************
00003852                          2260  ****************|***********|***************|********************************
00003852  18FC 002D               2261  GET_EA_100      MOVE.B      #'-',(A4)+      Push -(A#) to A4 buffer
00003856  18FC 0028               2262                  MOVE.B      #'(',(A4)+      
0000385A  18FC 0041               2263                  MOVE.B      #'A',(A4)+
0000385E  4EB9 0000396C           2264                  JSR         PUSH_REG_NUM    Push registry number
00003864  18FC 0029               2265                  MOVE.B      #')',(A4)+
00003868  4EF8 3804               2266                  JMP         GET_EA_DONE
0000386C                          2267                  
0000386C                          2268  *****************************************************************************
0000386C                          2269  *GET_EA_101******************************************************************
0000386C                          2270  ****************|***********|***************|********************************
0000386C  18FC 0028               2271  GET_EA_101      MOVE.B      #'(',(A4)+      Push ( to A4 buffer
00003870  3015                    2272                  MOVE.W      (A5),D0         Move next address data to D0
00003872  0C86 00000000           2273                  CMPI.L      #$0,D6          Check if there is data to read
00003878  6700 0296               2274                  BEQ         ERROR_1         
0000387C  5386                    2275                  SUBI.L      #$1,D6          Decrement counter
0000387E  18FC 0024               2276                  MOVE.B      #'$',(A4)+      Push $ to A4 buffer
00003882  E048                    2277                  LSR.W       #$8,D0          Get first digit of address
00003884  E848                    2278                  LSR.W       #$4,D0
00003886  4EB9 00003B2A           2279                  JSR         CVT_ASCII       Push digit to A4 buffer
0000388C  3015                    2280                  MOVE.W      (A5),D0         Move next address data to D0
0000388E  E948                    2281                  LSL.W       #$4,D0          Knock off first digit
00003890  E048                    2282                  LSR.W       #$8,D0          Get second digit of address
00003892  E848                    2283                  LSR.W       #$4,D0
00003894  4EB9 00003B2A           2284                  JSR         CVT_ASCII       Push digit to A4 buffer
0000389A  3015                    2285                  MOVE.W      (A5),D0         Move next address data to D0
0000389C  E148                    2286                  LSL.W       #$8,D0          Knock off first two digits
0000389E  E048                    2287                  LSR.W       #$8,D0          Get third digit of address
000038A0  E848                    2288                  LSR.W       #$4,D0
000038A2  4EB9 00003B2A           2289                  JSR         CVT_ASCII       Push digit to A4 buffer
000038A8  3015                    2290                  MOVE.W      (A5),D0         Move next address data to D0
000038AA  E148                    2291                  LSL.W       #$8,D0          Knock off first three digits
000038AC  E948                    2292                  LSL.W       #$4,D0          
000038AE  E048                    2293                  LSR.W       #$8,D0          Get fourth digit of address
000038B0  E848                    2294                  LSR.W       #$4,D0           
000038B2  4EB9 00003B2A           2295                  JSR         CVT_ASCII       Push digit to A4 buffer
000038B8  3015                    2296                  MOVE.W      (A5),D0         Move next address data to D0
000038BA  B07C FFFF               2297                  CMP.W       #$FFFF,D0       Check size of data
000038BE  6C00 0254               2298                  BGE         ERROR_2         Instruction is invalid
000038C2  18FC 002C               2299                  MOVE.B      #',',(A4)+      Push ),A# to A4 buffer
000038C6  18FC 0041               2300                  MOVE.B      #'A',(A4)+      
000038CA  4EB9 0000396C           2301                  JSR         PUSH_REG_NUM    Push registry number
000038D0  18FC 0029               2302                  MOVE.B      #')',(A4)+
000038D4  548D                    2303                  ADDA.L      #$2,A5          Increment the current address
000038D6  4EF8 3804               2304                  JMP         GET_EA_DONE
000038DA                          2305                  
000038DA                          2306  *****************************************************************************
000038DA                          2307  *GET_EA_110******************************************************************
000038DA                          2308  ****************|***********|***************|********************************
000038DA  18FC 0028               2309  GET_EA_110      MOVE.B      #'(',(A4)+      Push ( to A4 buffer
000038DE  3015                    2310                  MOVE.W      (A5),D0         Move next address data to D0
000038E0  0C86 00000000           2311                  CMPI.L      #$0,D6          Check if there is data to read
000038E6  6700 0228               2312                  BEQ         ERROR_1         
000038EA  5386                    2313                  SUBI.L      #$1,D6          Decrement counter
000038EC  18FC 0024               2314                  MOVE.B      #'$',(A4)+      Push $ to A4 buffer
000038F0  E148                    2315                  LSL.W       #$8,D0          Get first digit of address
000038F2  E048                    2316                  LSR.W       #$8,D0 
000038F4  E848                    2317                  LSR.W       #$4,D0
000038F6  4EB9 00003B2A           2318                  JSR         CVT_ASCII       Push digit to A4 buffer
000038FC  3015                    2319                  MOVE.W      (A5),D0         Move next address data to D0
000038FE  E148                    2320                  LSL.W       #$8,D0          Get second digit of address
00003900  E948                    2321                  LSL.W       #$4,D0           
00003902  E048                    2322                  LSR.W       #$8,D0           
00003904  E848                    2323                  LSR.W       #$4,D0 
00003906  4EB9 00003B2A           2324                  JSR         CVT_ASCII       Push digit to A4 buffer
0000390C  18FC 002C               2325                  MOVE.B      #',',(A4)+      Push ,A### to A4 buffer
00003910  18FC 0041               2326                  MOVE.B      #'A',(A4)+
00003914  4EB9 0000396C           2327                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000391A  18FC 002C               2328                  MOVE.B      #',',(A4)+      
0000391E  3015                    2329                  MOVE.W      (A5),D0         Move next address data to D0
00003920  E148                    2330                  LSL.W       #$8,D0          Get the register type code
00003922  EF48                    2331                  LSL.W       #$7,D0           
00003924  4EB9 00003B60           2332                  JSR         INS_D_A         Push the register code
0000392A  3015                    2333                  MOVE.W      (A5),D0         Move next address data to D0
0000392C  E348                    2334                  LSL.W       #$1,D0          Shift data to get registry number
0000392E  E048                    2335                  LSR.W       #$8,D0           
00003930  EA48                    2336                  LSR.W       #$5,D0          
00003932  2400                    2337                  MOVE.L      D0,D2           Move the data for PUSH_REG_NUM
00003934  4EB9 0000396C           2338                  JSR         PUSH_REG_NUM    Push registry number to A4 buffer
0000393A  18FC 0029               2339                  MOVE.B      #')',(A4)+      
0000393E  548D                    2340                  ADDA.L      #2,A5           Increment the current address
00003940  4EF8 3804               2341                  JMP         GET_EA_DONE
00003944                          2342  
00003944                          2343  *****************************************************************************
00003944                          2344  *GET_EA_111******************************************************************
00003944                          2345  ****************|***********|***************|********************************
00003944  4EB9 000039AE           2346  GET_EA_111      JSR         GET_ABSOLUTE    Locate and push absolute address
0000394A  4EF8 3804               2347                  JMP         GET_EA_DONE
0000394E                          2348  
0000394E                          2349  *****************************************************************************
0000394E                          2350  *EFF_ADDR_MOVE***************************************************************
0000394E                          2351  ****************|***********|***************|********************************
0000394E  4EB8 37BE               2352  EFF_ADDR_MOVE   JSR         GET_EA_MODE     Get the effective address mode
00003952  18FC 002C               2353                  MOVE.B      #',',(A4)+      Push , to A4 buffer
00003956  3407                    2354                  MOVE.W      D7,D2           Move current opcode to D2
00003958  E94A                    2355                  LSL.W       #$4,D2          Format OPCODE data PUSH_REG_NUM
0000395A  E04A                    2356                  LSR.W       #$8,D2
0000395C  EA4A                    2357                  LSR.W       #$5,D2
0000395E  3A07                    2358                  MOVE.W      D7,D5           Move current opcode GET_EA_MODE
00003960  EF4D                    2359                  LSL.W       #$7,D5          Format the opcode data at D5
00003962  E04D                    2360                  LSR.W       #$8,D5
00003964  EA4D                    2361                  LSR.W       #$5,D5
00003966  4EB8 37BE               2362                  JSR         GET_EA_MODE     Get second EA mode
0000396A  4E75                    2363                  RTS
0000396C                          2364                  
0000396C                          2365  *****************************************************************************
0000396C                          2366  *PUSH REGISTER NUMBER********************************************************
0000396C                          2367  ****************|***********|***************|********************************
0000396C  0C02 0000               2368  PUSH_REG_NUM    CMPI.B      #$0,D2          Check if register is 0     
00003970  6700 015E               2369                  BEQ         PUSH_REG_000      
00003974  0C02 0001               2370                  CMPI.B      #$1,D2          Check if register is 1     
00003978  6700 015E               2371                  BEQ         PUSH_REG_001      
0000397C  0C02 0002               2372                  CMPI.B      #$2,D2          Check if register is 2     
00003980  6700 015E               2373                  BEQ         PUSH_REG_010      
00003984  0C02 0003               2374                  CMPI.B      #$3,D2          Check if register is 3     
00003988  6700 015E               2375                  BEQ         PUSH_REG_011      
0000398C  0C02 0004               2376                  CMPI.B      #$4,D2          Check if register is 4     
00003990  6700 015E               2377                  BEQ         PUSH_REG_100      
00003994  0C02 0005               2378                  CMPI.B      #$5,D2          Check if register is 5     
00003998  6700 015E               2379                  BEQ         PUSH_REG_101      
0000399C  0C02 0006               2380                  CMPI.B      #$6,D2          Check if register is 6     
000039A0  6700 015E               2381                  BEQ         PUSH_REG_110      
000039A4  0C02 0007               2382                  CMPI.B      #$7,D2          Check if register is 7     
000039A8  6700 015E               2383                  BEQ         PUSH_REG_111      
000039AC  4E75                    2384  PUSH_REG_DONE   RTS
000039AE                          2385  
000039AE                          2386  *****************************************************************************
000039AE                          2387  *GET_ABSOLUTE****************************************************************
000039AE                          2388  ****************|***********|***************|********************************
000039AE  0C02 0000               2389  GET_ABSOLUTE    CMPI.B      #$0,D2          Check if mode is 000     
000039B2  6700 001A               2390                  BEQ         GET_ABS_000       
000039B6  0C02 0001               2391                  CMPI.B      #$1,D2          Check if mode is 001
000039BA  6700 0060               2392                  BEQ         GET_ABS_001       
000039BE  0C02 0004               2393                  CMPI.B      #$4,D2          Check if mode is 100
000039C2  6700 00DE               2394                  BEQ         GET_ABS_100
000039C6  4EF9 00003B10           2395                  JMP         ERROR_1
000039CC  4E75                    2396  GET_ABS_DONE    RTS
000039CE                          2397  
000039CE                          2398  
000039CE                          2399  *****************************************************************************
000039CE                          2400  *GET_ABS_000*****************************************************************
000039CE                          2401  ****************|***********|***************|********************************
000039CE  18FC 0024               2402  GET_ABS_000     MOVE.B      #'$',(A4)+      Push $ followed by word address
000039D2  3015                    2403                  MOVE.W      (A5),D0         Move next word data to D0
000039D4  0C86 00000000           2404                  CMPI.L      #$0,D6          Check if any data remaining
000039DA  6700 0134               2405                  BEQ         ERROR_1
000039DE  5386                    2406                  SUBI.L      #$1,D6          Decrement counter
000039E0  E048                    2407                  LSR.W       #$8,D0          Get first digit
000039E2  E848                    2408                  LSR.W       #$4,D0
000039E4  4EB9 00003B2A           2409                  JSR         CVT_ASCII       Push first digit to A4 buffer
000039EA  3015                    2410                  MOVE.W      (A5),D0         Move next word data to D0
000039EC  E948                    2411                  LSL.W       #$4,D0          Get second digit
000039EE  E048                    2412                  LSR.W       #$8,D0
000039F0  E848                    2413                  LSR.W       #$4,D0
000039F2  4EB9 00003B2A           2414                  JSR         CVT_ASCII       Push second digit to A4 buffer
000039F8  3015                    2415                  MOVE.W      (A5),D0         Move next word data to D0
000039FA  E148                    2416                  LSL.W       #$8,D0          Get third digit
000039FC  E048                    2417                  LSR.W       #$8,D0
000039FE  E848                    2418                  LSR.W       #$4,D0
00003A00  4EB9 00003B2A           2419                  JSR         CVT_ASCII       Push third digit to A4 buffer
00003A06  3015                    2420                  MOVE.W      (A5),D0         Move next word data to D0
00003A08  E148                    2421                  LSL.W       #$8,D0          Get fourth digit
00003A0A  E948                    2422                  LSL.W       #$4,D0           
00003A0C  E048                    2423                  LSR.W       #$8,D0
00003A0E  E848                    2424                  LSR.W       #$4,D0
00003A10  4EB9 00003B2A           2425                  JSR         CVT_ASCII       Push fourth digit to A4 buffer
00003A16  548D                    2426                  ADDA.L      #$2,A5          Increment the current address
00003A18  4EF8 39CC               2427                  JMP         GET_ABS_DONE
00003A1C                          2428                  
00003A1C                          2429  *****************************************************************************
00003A1C                          2430  *GET_ABS_001*****************************************************************
00003A1C                          2431  ****************|***********|***************|********************************
00003A1C  18FC 0024               2432  GET_ABS_001     MOVE.B      #'$',(A4)+      Push $ followed by longword
00003A20  3015                    2433                  MOVE.W      (A5),D0         Move next word data to D0
00003A22  0C86 00000001           2434                  CMPI.L      #$1,D6          Check if there is any data
00003A28  6F00 00E6               2435                  BLE         ERROR_1
00003A2C  5586                    2436                  SUBI.L      #$2,D6          Decrement counter
00003A2E  E048                    2437                  LSR.W       #$8,D0          Get first digit
00003A30  E848                    2438                  LSR.W       #$4,D0           
00003A32  4EB9 00003B2A           2439                  JSR         CVT_ASCII       Push first digit to A4 buffer
00003A38  3015                    2440                  MOVE.W      (A5),D0         Move next word data to D0
00003A3A  E948                    2441                  LSL.W       #$4,D0          Get second digit
00003A3C  E048                    2442                  LSR.W       #$8,D0           
00003A3E  E848                    2443                  LSR.W       #$4,D0
00003A40  4EB9 00003B2A           2444                  JSR         CVT_ASCII       Push second digit to A4 buffer
00003A46  3015                    2445                  MOVE.W      (A5),D0         Move next word data to D0
00003A48  E148                    2446                  LSL.W       #$8,D0          Get third digit
00003A4A  E048                    2447                  LSR.W       #$8,D0           
00003A4C  E848                    2448                  LSR.W       #$4,D0           
00003A4E  4EB9 00003B2A           2449                  JSR         CVT_ASCII       Push third digit to A4 buffer
00003A54  301D                    2450                  MOVE.W      (A5)+,D0        Move next word data to D0
00003A56  E148                    2451                  LSL.W       #$8,D0          Get fourth digit
00003A58  E948                    2452                  LSL.W       #$4,D0          
00003A5A  E048                    2453                  LSR.W       #$8,D0
00003A5C  E848                    2454                  LSR.W       #$4,D0
00003A5E  4EB9 00003B2A           2455                  JSR         CVT_ASCII       Push fourth digit to A4 buffer
00003A64  3015                    2456                  MOVE.W      (A5),D0         Move next word data to D0
00003A66  E048                    2457                  LSR.W       #$8,D0          Get fifth digit
00003A68  E848                    2458                  LSR.W       #$4,D0
00003A6A  4EB9 00003B2A           2459                  JSR         CVT_ASCII       Push fifth digit to A4 buffer
00003A70  3015                    2460                  MOVE.W      (A5),D0         Move next word data to D0
00003A72  E948                    2461                  LSL.W       #$4,D0          Get sixth digit
00003A74  E048                    2462                  LSR.W       #$8,D0
00003A76  E848                    2463                  LSR.W       #$4,D0
00003A78  4EB9 00003B2A           2464                  JSR         CVT_ASCII       Push sixth digit to A4 buffer
00003A7E  3015                    2465                  MOVE.W      (A5),D0         Move next word data to D0
00003A80  E148                    2466                  LSL.W       #$8,D0          Get seventh digit
00003A82  E048                    2467                  LSR.W       #$8,D0
00003A84  E848                    2468                  LSR.W       #$4,D0
00003A86  4EB9 00003B2A           2469                  JSR         CVT_ASCII       Push seventh digit to A4 buffer
00003A8C  3015                    2470                  MOVE.W      (A5),D0         Move next word data to D0
00003A8E  E148                    2471                  LSL.W       #$8,D0          Get eigth digit
00003A90  E948                    2472                  LSL.W       #$4,D0           
00003A92  E048                    2473                  LSR.W       #$8,D0
00003A94  E848                    2474                  LSR.W       #$4,D0
00003A96  4EB9 00003B2A           2475                  JSR         CVT_ASCII       Push eigth digit to A4 buffer
00003A9C  548D                    2476                  ADDA.L      #$2,A5          Increment the current address
00003A9E  4EF8 39CC               2477                  JMP         GET_ABS_DONE
00003AA2                          2478                  
00003AA2                          2479  *****************************************************************************
00003AA2                          2480  *GET_ABS_100*****************************************************************
00003AA2                          2481  ****************|***********|***************|********************************
00003AA2  18FC 0023               2482  GET_ABS_100     MOVE.B      #'#',(A4)+      Push # to A4 buffer
00003AA6  18FC 0024               2483                  MOVE.B      #'$',(A4)+      Push HEX identifier to A4 buffer
00003AAA  0C86 00000000           2484                  CMPI.L      #$0,D6          Check if there is data remaining
00003AB0  6700 005E               2485                  BEQ         ERROR_1
00003AB4  0C40 FFFF               2486                  CMPI.W      #$FFFF,D0
00003AB8  6700 FBCA               2487                  BEQ         PUSH_B
00003ABC  4EB8 36A8               2488                  JSR         PUSH_W          Convert to ASCII and push to A4
00003AC0  5386                    2489  ABS_100_CONT    SUBI.L      #$1,D6          Decrement counter
00003AC2  548D                    2490                  ADDA.L      #$2,A5          Increment the current address
00003AC4  B83C 0001               2491                  CMP.B       #$1,D4
00003AC8  6E00 FBAC               2492                  BGT         PUSH_LW
00003ACC  4EF8 39CC               2493                  JMP         GET_ABS_DONE
00003AD0                          2494  
00003AD0                          2495  *****************************************************************************
00003AD0                          2496  *PUSH_REG_000****************************************************************
00003AD0                          2497  ****************|***********|***************|********************************
00003AD0  18FC 0030               2498  PUSH_REG_000    MOVE.B      #'0',(A4)+      Push 0 to A4 buffer
00003AD4  4EF8 39AC               2499                  JMP         PUSH_REG_DONE
00003AD8                          2500                  
00003AD8                          2501  *****************************************************************************
00003AD8                          2502  *PUSH_REG_001****************************************************************
00003AD8                          2503  ****************|***********|***************|********************************
00003AD8  18FC 0031               2504  PUSH_REG_001    MOVE.B      #'1',(A4)+      Push 1 to A4 buffer
00003ADC  4EF8 39AC               2505                  JMP         PUSH_REG_DONE
00003AE0                          2506                  
00003AE0                          2507  *****************************************************************************
00003AE0                          2508  *PUSH_REG_010****************************************************************
00003AE0                          2509  ****************|***********|***************|********************************
00003AE0  18FC 0032               2510  PUSH_REG_010    MOVE.B      #'2',(A4)+      Push 2 to A4 buffer
00003AE4  4EF8 39AC               2511                  JMP         PUSH_REG_DONE
00003AE8                          2512                  
00003AE8                          2513  *****************************************************************************
00003AE8                          2514  *PUSH_REG_011****************************************************************
00003AE8                          2515  ****************|***********|***************|********************************
00003AE8  18FC 0033               2516  PUSH_REG_011    MOVE.B      #'3',(A4)+      Push 3 to A4 buffer
00003AEC  4EF8 39AC               2517                  JMP         PUSH_REG_DONE
00003AF0                          2518                  
00003AF0                          2519  *****************************************************************************
00003AF0                          2520  *PUSH_REG_100****************************************************************
00003AF0                          2521  ****************|***********|***************|********************************
00003AF0  18FC 0034               2522  PUSH_REG_100    MOVE.B      #'4',(A4)+      Push 4 to A4 buffer
00003AF4  4EF8 39AC               2523                  JMP         PUSH_REG_DONE
00003AF8                          2524                  
00003AF8                          2525  *****************************************************************************
00003AF8                          2526  *PUSH_REG_101****************************************************************
00003AF8                          2527  ****************|***********|***************|********************************
00003AF8  18FC 0035               2528  PUSH_REG_101    MOVE.B      #'5',(A4)+      Push 5 to A4 buffer
00003AFC  4EF8 39AC               2529                  JMP         PUSH_REG_DONE
00003B00                          2530                  
00003B00                          2531  *****************************************************************************
00003B00                          2532  *PUSH_REG_110****************************************************************
00003B00                          2533  ****************|***********|***************|********************************
00003B00  18FC 0036               2534  PUSH_REG_110    MOVE.B      #'6',(A4)+      Push 6 to A4 buffer
00003B04  4EF8 39AC               2535                  JMP         PUSH_REG_DONE
00003B08                          2536                  
00003B08                          2537  *****************************************************************************
00003B08                          2538  *PUSH_REG_111****************************************************************
00003B08                          2539  ****************|***********|***************|********************************
00003B08  18FC 0037               2540  PUSH_REG_111    MOVE.B      #'7',(A4)+      Push 7 to A4 buffer
00003B0C  4EF8 39AC               2541                  JMP         PUSH_REG_DONE
00003B10                          2542  
00003B10                          2543  *****************************************************************************
00003B10                          2544  *ERROR_1 - Cannot be disassembled********************************************
00003B10                          2545  ****************|***********|***************|********************************
00003B10  4244                    2546  ERROR_1         CLR         D4              Set error state registry D4
00003B12  4E75                    2547                  RTS
00003B14                          2548                  
00003B14                          2549  *****************************************************************************
00003B14                          2550  *ERROR_2 - ERROR WITH INCREMENT ADDRESS**************************************
00003B14                          2551  ****************|***********|***************|********************************
00003B14  4244                    2552  ERROR_2         CLR         D4              Set to error state
00003B16  5286                    2553                  ADDI.L      #$1,D6          Increment current address
00003B18  4E75                    2554                  RTS
00003B1A                          2555  
00003B1A                          2556  *****************************************************************************
00003B1A                          2557  *ERROR_3 - ERROR WITH DECREMENT WORD ADDRESS*********************************
00003B1A                          2558  ****************|***********|***************|********************************
00003B1A  4244                    2559  ERROR_3         CLR         D4              Set to error state
00003B1C  5286                    2560                  ADDI.L      #$1,D6          Increment current address
00003B1E  558D                    2561                  SUB.L       #$2,A5          Step next address back
00003B20  4E75                    2562                  RTS
00003B22                          2563  
00003B22                          2564  *****************************************************************************
00003B22                          2565  *ERROR_4 - ERROR WITH DECREMENT LONGWORD ADDRESS*****************************
00003B22                          2566  ****************|***********|***************|********************************
00003B22  4244                    2567  ERROR_4         CLR         D4              Set to error state
00003B24  5486                    2568                  ADDI.L      #$2,D6          Increment current working address
00003B26  598D                    2569                  SUB.L       #$4,A5          Step next address back
00003B28  4E75                    2570                  RTS
00003B2A                          2571  
00003B2A                          2572  *****************************************************************************
00003B2A                          2573  *CONVERT ASCII CHARACTER*****************************************************
00003B2A                          2574  ****************|***********|***************|********************************
00003B2A  B03C 0009               2575  CVT_ASCII       CMP.B       #$9,D0          Check if character
00003B2E  6E00 000C               2576                  BGT         CHAR_ASCII
00003B32  0600 0030               2577  DEC_ASCII       ADDI.B      #$30,D0         Convert to ASCII number
00003B36  4EF9 00003B40           2578                  JMP         PUSH_ASCII
00003B3C  0600 0037               2579  CHAR_ASCII      ADDI.B      #$37,D0         Convert to ASCII character
00003B40  18C0                    2580  PUSH_ASCII      MOVE.B      D0,(A4)+        Push character to A4 buffer
00003B42  16C0                    2581                  MOVE.B      D0,(A3)+        Push character to A3 buffer
00003B44  4E75                    2582                  RTS
00003B46                          2583  
00003B46                          2584  *****************************************************************************
00003B46                          2585  *CONVERT ASCII CHARACTER 2 - SAME AS ABOVE BUT D5 REGISTER*******************
00003B46                          2586  ****************|***********|***************|********************************
00003B46  BA3C 000A               2587  CVT_ASCII2      CMP.B       #$A,D5          Check if input is character
00003B4A  6C00 000C               2588                  BGE         CHAR_ASCII2
00003B4E  0605 0030               2589  DEC_ASCII2      ADDI.B      #$30,D5         Convert to ASCII number
00003B52  4EF9 00003B5C           2590                  JMP         PUSH_ASCII2 
00003B58  0605 0037               2591  CHAR_ASCII2     ADDI.B      #$37,D5         Convert to ASCII character
00003B5C  18C5                    2592  PUSH_ASCII2     MOVE.B      D5,(A4)+        Push character to A4 buffer
00003B5E  4E75                    2593                  RTS
00003B60                          2594  
00003B60                          2595  *****************************************************************************
00003B60                          2596  *INSERT D OR A***************************************************************
00003B60                          2597  ****************|***********|***************|********************************
00003B60  B03C 0000               2598  INS_D_A         CMP.B       #$0,D0          Check if DATA registry
00003B64  6700 000A               2599                  BEQ         INS_D 
00003B68  B03C 0001               2600                  CMP.B       #$1,D0          Check if ADDRESS registry
00003B6C  6700 0008               2601                  BEQ         INS_A
00003B70  18FC 0044               2602  INS_D           MOVE.B      #'D',(A4)+      Push D to A4 buffer
00003B74  4E75                    2603                  RTS
00003B76  18FC 0041               2604  INS_A           MOVE.B      #'A',(A4)+      Push A to A4 buffer
00003B7A  4E75                    2605                  RTS
00003B7C                          2606  
00003B7C                          2607  *****************************************************************************
00003B7C                          2608  *SET BUFFERS WITH ADDRESSES**************************************************
00003B7C                          2609  ****************|***********|***************|********************************
00003B7C  163C 0030               2610  SET_BUFFER      MOVE.B      #$30,D3         ASCII '0' into D3
00003B80  18C3                    2611                  MOVE.B      D3,(A4)+        
00003B82  18C3                    2612                  MOVE.B      D3,(A4)+        
00003B84  16C3                    2613                  MOVE.B      D3,(A3)+        
00003B86  16C3                    2614                  MOVE.B      D3,(A3)+        
00003B88  2605                    2615                  MOVE.L      D5,D3           Move address at D5 to D3
00003B8A                          2616                  
00003B8A  E18B                    2617                  LSL.L       #$8,D3          Move most significant
00003B8C  4EB9 00003BD8           2618                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003B92  2605                    2619                  MOVE.L      D5,D3           Move address at D5 to D3
00003B94                          2620                  
00003B94  E18B                    2621                  LSL.L       #$8,D3          Move 2nd most significant
00003B96  E98B                    2622                  LSL.L       #$4,D3          Shifting Complete
00003B98  4EB9 00003BD8           2623                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003B9E  2605                    2624                  MOVE.L      D5,D3           Move address at D5 to D3
00003BA0                          2625                  
00003BA0  E18B                    2626                  LSL.L       #$8,D3          Move 3rd most significant
00003BA2  E18B                    2627                  LSL.L       #$8,D3          Shifting complete
00003BA4  4EB9 00003BD8           2628                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003BAA  2605                    2629                  MOVE.L      D5,D3           Move address at D5 to D3
00003BAC                          2630                  
00003BAC  E18B                    2631                  LSL.L       #$8,D3          Move 4th most significant
00003BAE  E18B                    2632                  LSL.L       #$8,D3 
00003BB0  E98B                    2633                  LSL.L       #$4,D3          Shifting Complete
00003BB2  4EB9 00003BD8           2634                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003BB8  2605                    2635                  MOVE.L      D5,D3           Move address at D5 to D3
00003BBA                          2636  
00003BBA  E18B                    2637                  LSL.L       #$8,D3          Move 5th most significant
00003BBC  E18B                    2638                  LSL.L       #$8,D3 
00003BBE  E18B                    2639                  LSL.L       #$8,D3          Shifting Complete
00003BC0  4EB9 00003BD8           2640                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003BC6  2605                    2641                  MOVE.L      D5,D3           Move address at D5 to D3
00003BC8                          2642  
00003BC8  E18B                    2643                  LSL.L       #$8,D3          Move 6th most significant
00003BCA  E18B                    2644                  LSL.L       #$8,D3
00003BCC  E18B                    2645                  LSL.L       #$8,D3
00003BCE  E98B                    2646                  LSL.L       #$4,D3          Shifting Complete
00003BD0  4EB9 00003BD8           2647                  JSR         CVT_HEX_ASCII   Convert Hex value to ASCII text
00003BD6                          2648                  
00003BD6  4E75                    2649                  RTS                         Decode complete
00003BD8                          2650  
00003BD8                          2651  *****************************************************************************
00003BD8                          2652  *CVT_HEX_ASCII***************************************************************
00003BD8                          2653  ****************|***********|***************|********************************
00003BD8  E08B                    2654  CVT_HEX_ASCII   LSR.L       #$8,D3          Shift data in D3
00003BDA  E08B                    2655                  LSR.L       #$8,D3          
00003BDC  E08B                    2656                  LSR.L       #$8,D3     
00003BDE  E88B                    2657                  LSR.L       #$4,D3          Shifting complete
00003BE0                          2658                  
00003BE0  B63C 0009               2659                  CMP.B       #$09,D3         Check if value is a number
00003BE4  6E00 000C               2660                  BGT         CVT_CHR         convert to ASCII Character
00003BE8  0603 0030               2661                  ADDI.B      #$30,D3         Add 48 to get ASCII number value
00003BEC  4EF9 00003BF6           2662                  JMP         SET_GB_BUF      Move to set buffers
00003BF2                          2663  
00003BF2  0603 0037               2664  CVT_CHR         ADDI.B      #$37,D3         Add 55 to get ASCII letter value
00003BF6                          2665  
00003BF6  18C3                    2666  SET_GB_BUF      MOVE.B      D3,(A4)+        Load D3 ASCII value into buffers
00003BF8  16C3                    2667                  MOVE.B      D3,(A3)+        
00003BFA  4E75                    2668                  RTS                         Return to set buffers subroutine
00003BFC                          2669                  
00003BFC                          2670  *****************************************************************************
00003BFC                          2671  *PG_CNTR*********************************************************************
00003BFC                          2672  ****************|***********|***************|********************************
00003BFC  45F8 1388               2673  PG_CNTR         LEA         LINES,A2        Move LINES to address register A2   
00003C00  5212                    2674                  ADDI.B      #$1,(A2)        Increment number of lines    
00003C02  0C12 001E               2675                  CMP.B       #30,(A2)        Check if LINES is at max value
00003C06  6700 0004               2676                  BEQ         SCRN_FULL       Stop printing to screen
00003C0A  4E75                    2677                  RTS 
00003C0C  14BC 0000               2678  SCRN_FULL       MOVE.B      #00,(A2)        Reset line counter at A2
00003C10  43F8 12D2               2679                  LEA         NXT_PAGE,A1     Prep continue message
00003C14  700E                    2680                  MOVEQ       #14,D0          Load I/O trap task into D0
00003C16  4E4F                    2681                  TRAP        #15             Display instruction to user
00003C18  43F8 14CA               2682                  LEA         CONTINUE,A1     Load storage for user input
00003C1C  7002                    2683                  MOVEQ       #2,D0           Load trap task into D0
00003C1E  4E4F                    2684                  TRAP        #15             Capture user input
00003C20  4E75                    2685                  RTS
00003C22                          2686                  
00003C22                          2687  *****************************************************************************
00003C22                          2688  *MISSION_COMPLETE: THE DARTH ENDING******************************************
00003C22                          2689  ****************|***********|***************|********************************
00003C22                          2690  MISSION_CMP    
00003C22  43F8 1BFB               2691                  LEA         DARTH_ENDER,A1  Prep ending art
00003C26  700E                    2692                  MOVEQ       #14,D0          Load trap task into D0
00003C28  4E4F                    2693                  TRAP        #15             Display ending message and art
00003C2A  4E75                    2694                  RTS
00003C2C                          2695  
00003C2C                          2696  *****************************************************************************
00003C2C                          2697  *BUFFER_A3*******************************************************************
00003C2C                          2698  ****************|***********|***************|********************************
00003C2C  3215                    2699  BUFFER_A3       MOVE.W      (A5),D1         Move A5 data to D1 for load
00003C2E  4EB9 00003C5A           2700                  JSR         B_A3_HLP        Memory conversion for I/O process
00003C34  3215                    2701                  MOVE.W      (A5),D1         Move A5 data to D1 for load
00003C36  E949                    2702                  LSL.W       #$4,D1          Shift data at D1 by one hex
00003C38  4EB9 00003C5A           2703                  JSR         B_A3_HLP        Memory conversion for I/O process
00003C3E  3215                    2704                  MOVE.W      (A5),D1         Move A5 data to D1 for load
00003C40  E149                    2705                  LSL.W       #$8,D1          Shift data at D1 by 2 hex
00003C42  4EB9 00003C5A           2706                  JSR         B_A3_HLP        Memory conversion for I/O process
00003C48  3215                    2707                  MOVE.W      (A5),D1         Move A5 data to D1 for load
00003C4A  E149                    2708                  LSL.W       #$8,D1          3 hex value shift
00003C4C  E949                    2709                  LSL.W       #$4,D1           
00003C4E  4EB9 00003C5A           2710                  JSR         B_A3_HLP        Memory conversion for I/O process
00003C54  16BC 0000               2711                  MOVE.B      #$00,(A3)       End value for buffer load
00003C58  4E75                    2712                  RTS
00003C5A                          2713              
00003C5A                          2714  *****************************************************************************
00003C5A                          2715  *B_A3_HLP********************************************************************
00003C5A                          2716  ****************|***********|***************|********************************
00003C5A  E049                    2717  B_A3_HLP        LSR.W       #$8,D1          3 hex value shift
00003C5C  E849                    2718                  LSR.W       #$4,D1           
00003C5E  B23C 000A               2719                  CMP.B       #$0A,D1         Check if value is decimal number
00003C62  6D00 000A               2720                  BLT         DEC_NUM         
00003C66  0641 0037               2721                  ADD.W       #$37,D1         Convert to ASCII char
00003C6A  16C1                    2722                  MOVE.B      D1,(A3)+        Add to A3 buffer
00003C6C  4E75                    2723                  RTS 
00003C6E  0641 0030               2724  DEC_NUM         ADD.W       #$30,D1         Convert to ASCII number
00003C72  16C1                    2725                  MOVE.B      D1,(A3)+        Add to A3 buffer
00003C74  4E75                    2726                  RTS 
00003C76                          2727  
00003C76                          2728  *****************************************************************************
00003C76                          2729  *A4_6SPACES******************************************************************
00003C76                          2730  ****************|***********|***************|********************************               
00003C76  18FC 0020               2731  A4_6SPACES      MOVE.B #' ',(A4)+           Push spaces to A4 buffer
00003C7A  18FC 0020               2732                  MOVE.B #' ',(A4)+ 
00003C7E  18FC 0020               2733                  MOVE.B #' ',(A4)+ 
00003C82  18FC 0020               2734                  MOVE.B #' ',(A4)+ 
00003C86  18FC 0020               2735                  MOVE.B #' ',(A4)+ 
00003C8A  18FC 0020               2736                  MOVE.B #' ',(A4)+
00003C8E  4E75                    2737                  RTS
00003C90                          2738  
00003C90                          2739  *****************************************************************************
00003C90                          2740  *END PROGRAM*****************************************************************
00003C90                          2741  ****************|***********|***************|********************************
00003C90                          2742                  END         DISA_PRG

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A4_6SPACES          3C76
ABS_100_CONT        3AC0
ADDR_ERROR          125F
BD_BUFF             138A
BIT_EIGHT           323C
BIT_EIGHT_DONE      3282
BIT_FIVE            2F2C
BIT_FIVE_DONE       2F6A
BIT_FOUR            2EDC
BIT_FOUR_DONE       2EFA
BIT_NINE            33C4
BIT_NINE_DONE       33FA
BIT_RANGE_3TO4      378E
BIT_RANGE_8         3784
BIT_SEVEN           31A6
BIT_SEVEN_DONE      31C4
BIT_SIX             305A
BIT_SIX_DONE        30A0
BIT_THREE           27E2
BIT_THREE_DONE      2846
BIT_TWO             2794
BIT_TWO_DONE        27A4
BRA_ADDR            34D2
BUFFER_A3           3C2C
B_16                34FC
B_32                3512
B_A3_HLP            3C5A
CHAR_ASCII          3B3C
CHAR_ASCII2         3B58
CHAR_SHFT           20EE
CHK_ODD             2116
CMPLT               1188
CONTINUE            14CA
CR                  D
CVT_ASCII           3B2A
CVT_ASCII2          3B46
CVT_CHR             3BF2
CVT_HEX_ASCII       3BD8
D2_0100             27A6
D2_0110             27C4
D3_0001             2848
D3_0010             285C
D3_0010B            28AA
D3_0010E            288A
D3_0010L            28B6
D3_0010S            2892
D3_0010W            28B0
D3_1110             2DE4
D3_1110JMP          2E08
D3_1110JSR          2E56
D3_1110NOP          2EC0
D3_1110NOPRTS       2EA4
D3_1110RTS          2ECE
D3_MOVEM            28BC
D3_MOVEML           28EA
D3_MOVEMW           28E2
D4_0100             2EFC
D4_1110             2F0C
D4_1111             2F1C
D5_000              2F7A
D5_001              2F8A
D5_010              2F98
D5_011              2FA8
D5_100              3036
D5_101              3042
D5_110              304E
D5_HLPR1            2FBE
D5_HLPR2            2FFA
D6_000              30B4
D6_001              30C2
D6_010              30D0
D6_011              30E0
D6_100              316A
D6_101              3176
D6_110              3182
D6_111              318E
D6_HLPR1            30FA
D6_HLPR2            3132
D7_000              31D8
D7_001              31E6
D7_010              31F4
D7_HLPR             3204
D8_000              3296
D8_001              32A4
D8_010              32B2
D8_011              335A
D8_100              32F8
D8_101              3306
D8_110              3314
D8_111              3378
D8_HLPR1            32C0
D8_HLPR2            3322
D8_HLPR3            3398
D9_000              340E
D9_001              341C
D9_010              342A
D9_100              3470
D9_101              347E
D9_110              348C
D9_HLPR1            3438
D9_HLPR2            349A
DARTH_ENDER         1BFB
DATA_SIZE           366C
DECODE              20A6
DECODE_IN           2094
DEC_ASCII           3B32
DEC_ASCII2          3B4E
DEC_NUM             3C6E
DISASSEMBLE         2134
DISASSEMBLED        2140
DISA_PRG            1000
DO_FLIP             2D14
DO_FLIP1            2D22
DO_FLIP2            2D2E
DO_FLIP3            2D3A
DO_FLIP4            2D48
DO_FLIP5            2D54
DO_FLIP6            2D62
DO_FLIP7            2D6E
DO_FLIP8            2D7C
DO_FLIP9            2D88
DO_FLIPA            2D96
DO_FLIPB            2DA2
DO_FLIPC            2DB0
DO_FLIPD            2DBC
DO_FLIPE            2DCA
DO_FLIPF            2DD6
D_0000              21D0
D_0001              21E2
D_0010              2208
D_0010_A            2248
D_0010_SPACES       222A
D_0011              2258
D_0011_A            2296
D_0011_SPACES       2278
D_0100              22A6
D_0101              22B8
D_0101_FINISH       2300
D_0110              2310
D_0111              2322
D_1000              2378
D_1001              2388
D_1011              2398
D_1100              23A8
D_1101              23C0
D_1110              23D0
D_1110_B            2716
D_1110_L            2732
D_1110_W            2724
D_ARITH             2474
D_ASB               2554
D_ASL               26DC
D_ASR               2496
D_ASRB              2578
D_ASRW              263C
D_ASR_L             2700
D_ASW               2618
D_COMP2_1110        277C
D_COMP_1110         2740
D_LOGIC             243E
D_LSB               251A
D_LSL               26A2
D_LSR               2460
D_LSRB              253E
D_LSRL              26C6
D_LSRW              2602
D_LSW               25DE
D_MEMSHFT           24AA
D_MOVEQ             2338
D_REGSHIFT          276C
D_ROR               242A
D_RORB              2504
D_RORL              268C
D_RORW              25C8
D_S_BYTE            24CA
D_S_LONG            2652
D_S_WORD            258E
EFFECTIVE_ADDR      3798
EFFECTIVE_HLPR      37B6
EFF_ADDR_MOVE       394E
END_IN1             1228
END_IN2             124C
END_PROMPT          1064
EN_DATA             FFFFFE
ERROR_1             3B10
ERROR_2             3B14
ERROR_3             3B1A
ERROR_4             3B22
E_ADDR_ERROR        210A
FAILED              1122
FILL_A3             119A
FILL_A4             1192
FILL_ADD            3284
FILL_AND            30A2
FILL_CMP            31C6
FILL_MOVE           21BE
FILL_OR             2F6C
FILL_SUB            33FC
GD_BUFF             13DA
GET_ABSOLUTE        39AE
GET_ABS_000         39CE
GET_ABS_001         3A1C
GET_ABS_100         3AA2
GET_ABS_DONE        39CC
GET_EA_000          3806
GET_EA_001          3814
GET_EA_010          3822
GET_EA_011          3838
GET_EA_100          3852
GET_EA_101          386C
GET_EA_110          38DA
GET_EA_111          3944
GET_EA_DONE         3804
GET_EA_MODE         37BE
GET_OFFSET          3528
GET_REG             376E
GET_REG2            3778
IMM_B               35FE
IMM_BACK            35F6
IMM_BACK2           3654
IMM_DATA            35A0
IMM_ERROR           35C8
IMM_L               361A
IMM_PUSH            35CE
IMM_SPACES          365C
IMM_W               360C
INPUT_ERR           20F4
INS_A               3B76
INS_D               3B70
INS_D_A             3B60
IO_PROC             10D0
LD_A7               1000
LEA_ERROR           3598
LEA_INS             3546
LF                  A
LINES               1388
LWR_ASCII           20E6
MAX_LINES           1389
MISSION_CMP         3C22
MOVEM_ANOTD         2CCA
MOVEM_AORD          2CBC
MOVEM_CHKPTR        2934
MOVEM_CONT          291A
MOVEM_CONT1         291E
MOVEM_FLIP          2CD0
MOVEM_PTR           29DC
MOVEM_PTR2          2A0C
MOVEM_PTRA          2A60
MOVEM_PTRC          2A78
MOVEM_PTRD          2A44
MOVEM_PTRW          2A34
MOVEM_PUSHR         2A7A
MOVEM_R0            2A8A
MOVEM_R1            2AA2
MOVEM_R1C           2AD4
MOVEM_R1CS          2AD0
MOVEM_R2            2AE2
MOVEM_R2C           2B1A
MOVEM_R2C1          2B26
MOVEM_R2CD          2B10
MOVEM_R3            2B34
MOVEM_R3C           2B6C
MOVEM_R3C1          2B78
MOVEM_R3CD          2B62
MOVEM_R4            2B86
MOVEM_R4C           2BBE
MOVEM_R4C1          2BCA
MOVEM_R4CD          2BB4
MOVEM_R5            2BD8
MOVEM_R5C           2C10
MOVEM_R5C1          2C1C
MOVEM_R5CD          2C06
MOVEM_R6            2C2A
MOVEM_R6C           2C62
MOVEM_R6C1          2C6E
MOVEM_R6CD          2C58
MOVEM_R7            2C7C
MOVEM_R7C           2CA4
MOVEM_R7C1          2CB0
MOVEM_R7CD          2C9A
MOVEM_REG           2944
MOVEM_REGA          296C
MOVEM_REGM          2980
MOVEM_REGW          29C8
MOVEM_RET           2CBA
MOVEM_S             29A6
MOVEM_SPACE         28EE
NXT_PAGE            12D2
ODD_ERROR           2128
ODD_MSG             1294
OPCODES             2142
OPCODES_DONE        21BC
PASS1               103E
PASS2               10AA
PASSED              112C
PG_CNTR             3BFC
PRG_SP              5000
PRINT_8             2308
PRINT_PAGE          1136
PUSH_ASCII          3B40
PUSH_ASCII2         3B5C
PUSH_B              3684
PUSH_L              36E0
PUSH_LW             3676
PUSH_REG_000        3AD0
PUSH_REG_001        3AD8
PUSH_REG_010        3AE0
PUSH_REG_011        3AE8
PUSH_REG_100        3AF0
PUSH_REG_101        3AF8
PUSH_REG_110        3B00
PUSH_REG_111        3B08
PUSH_REG_DONE       39AC
PUSH_REG_NUM        396C
PUSH_W              36A8
REPEAT              151A
REPEAT_ERROR        135A
REPEAT_MSG          131A
RPT                 113E
SCRN_FULL           3C0C
SET_BUFFER          3B7C
SET_GB_BUF          3BF6
START_IN            11E8
START_PROMPT        100E
ST_DATA             8000
S_ADDR_ERR          20FE
UPR_ASCII           20EA
USER_END            147A
USER_START          142A
VALID_0001          2204
VALID_INPUT         20FA
WELCOME             1004
WELCOME_MSG         156A
